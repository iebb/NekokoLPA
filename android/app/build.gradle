// On top of your file import a JSON parser
import groovy.json.JsonSlurper

plugins {
    id "com.android.application"
}

apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'


android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "ee.nekoko.nlpa"

    def inputFile = new File("$rootDir/../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)

    buildFeatures {
        buildConfig true
    }
    defaultConfig {
        applicationId "ee.nekoko.nlpa"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode packageJson["buildVersion"]
        versionName packageJson["version"]
    }
    signingConfigs {
        community {
            storeFile file('debug.keystore')
            storePassword 'CommunityKey'
            keyAlias 'CommunityKey'
            keyPassword 'CommunityKey'
        }
        esim9 {
            storeFile file('9eSIMCommunityKey.jks')
            storePassword '147258369'
            keyAlias 'key0'
            keyPassword '147258369'
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a' // , 'x86_64' , 'armeabi-v7a',  'x86'
            // universalApk true
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.community
            debuggable true
            versionNameSuffix "-debug"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_debug"
            ]
        }
        release {
            signingConfig signingConfigs.community
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    flavorDimensions "version"
    productFlavors {
        multisign {
            applicationIdSuffix ".multisign"
            dimension "version"
            manifestPlaceholders = [
                    appLabel: 'NekokoLPA M',
                    appIcon: "@mipmap/ic_launcher_multi"
            ]
        }
//        esim9 {
//            applicationIdSuffix ".esim9"
//            dimension "version"
//            versionNameSuffix "-9e"
//            signingConfig signingConfigs.esim9
//            manifestPlaceholders = [
//                    appLabel: '9eSIM',
//                    appIcon: "@mipmap/ic_launcher_9esim"
//            ]
//        }
        store {
            dimension "version"
            manifestPlaceholders = [
                    appLabel: 'NekokoLPA',
                    appIcon: "@mipmap/ic_launcher"
            ]
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // ---------------------------------------------------------------------------------------------
    // Identiv reader library
    // ---------------------------------------------------------------------------------------------

    // SwiperefreshLayout for profile list
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    // Preference
    implementation "androidx.preference:preference:1.2.1"
    // WorkManager
    implementation "androidx.work:work-runtime:2.9.1"

    // ---------------------------------------------------------------------------------------------
    // Lifecycle management
    // ---------------------------------------------------------------------------------------------
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.8.6"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.6"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:2.8.6"
    // Lifecycle runtime only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:2.8.6"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.8.6"
    // Annotation processor
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.google.android.datatransport:transport-api:3.2.0'

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Testing
    ////////////////////////////////////////////////////////////////////////////////////////////////
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.9.2"

    androidTestImplementation "androidx.test:rules:1.6.1"
    androidTestImplementation "androidx.test.ext:junit:1.2.1"

    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.6.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1"


}

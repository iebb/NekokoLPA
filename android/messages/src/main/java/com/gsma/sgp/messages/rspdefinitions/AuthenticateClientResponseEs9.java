/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.rspdefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import com.gsma.sgp.messages.pedefinitions.UICCCapability;
import com.gsma.sgp.messages.pkix1explicit88.Certificate;
import com.gsma.sgp.messages.pkix1explicit88.CertificateList;
import com.gsma.sgp.messages.pkix1explicit88.Time;
import com.gsma.sgp.messages.pkix1implicit88.SubjectKeyIdentifier;

public class AuthenticateClientResponseEs9 implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	public static final BerTag tag = new BerTag(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 59);

	private AuthenticateClientOk authenticateClientOk = null;
	private BerInteger authenticateClientError = null;
	private AuthenticateClientOkRpm authenticateClientOkRpm = null;
	private AuthenticateClientOkDeviceChange authenticateClientOkDeviceChange = null;
	private AuthenticateClientOkDelayedDeviceChange authenticateClientOkDelayedDeviceChange = null;
	
	public AuthenticateClientResponseEs9() {
	}

	public AuthenticateClientResponseEs9(byte[] code) {
		this.code = code;
	}

	public void setAuthenticateClientOk(AuthenticateClientOk authenticateClientOk) {
		this.authenticateClientOk = authenticateClientOk;
	}

	public AuthenticateClientOk getAuthenticateClientOk() {
		return authenticateClientOk;
	}

	public void setAuthenticateClientError(BerInteger authenticateClientError) {
		this.authenticateClientError = authenticateClientError;
	}

	public BerInteger getAuthenticateClientError() {
		return authenticateClientError;
	}

	public void setAuthenticateClientOkRpm(AuthenticateClientOkRpm authenticateClientOkRpm) {
		this.authenticateClientOkRpm = authenticateClientOkRpm;
	}

	public AuthenticateClientOkRpm getAuthenticateClientOkRpm() {
		return authenticateClientOkRpm;
	}

	public void setAuthenticateClientOkDeviceChange(AuthenticateClientOkDeviceChange authenticateClientOkDeviceChange) {
		this.authenticateClientOkDeviceChange = authenticateClientOkDeviceChange;
	}

	public AuthenticateClientOkDeviceChange getAuthenticateClientOkDeviceChange() {
		return authenticateClientOkDeviceChange;
	}

	public void setAuthenticateClientOkDelayedDeviceChange(AuthenticateClientOkDelayedDeviceChange authenticateClientOkDelayedDeviceChange) {
		this.authenticateClientOkDelayedDeviceChange = authenticateClientOkDelayedDeviceChange;
	}

	public AuthenticateClientOkDelayedDeviceChange getAuthenticateClientOkDelayedDeviceChange() {
		return authenticateClientOkDelayedDeviceChange;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (authenticateClientOkDelayedDeviceChange != null) {
			codeLength += authenticateClientOkDelayedDeviceChange.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);
			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}
			return codeLength;
		}
		
		if (authenticateClientOkDeviceChange != null) {
			codeLength += authenticateClientOkDeviceChange.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);
			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}
			return codeLength;
		}
		
		if (authenticateClientOkRpm != null) {
			codeLength += authenticateClientOkRpm.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);
			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}
			return codeLength;
		}
		
		if (authenticateClientError != null) {
			codeLength += authenticateClientError.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);
			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}
			return codeLength;
		}
		
		if (authenticateClientOk != null) {
			codeLength += authenticateClientOk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);
			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		BerLength length = new BerLength();
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		codeLength += length.decode(is);
		codeLength += berTag.decode(is);

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			authenticateClientOk = new AuthenticateClientOk();
			codeLength += authenticateClientOk.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			authenticateClientError = new BerInteger();
			codeLength += authenticateClientError.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			authenticateClientOkRpm = new AuthenticateClientOkRpm();
			codeLength += authenticateClientOkRpm.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			authenticateClientOkDeviceChange = new AuthenticateClientOkDeviceChange();
			codeLength += authenticateClientOkDeviceChange.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			authenticateClientOkDelayedDeviceChange = new AuthenticateClientOkDelayedDeviceChange();
			codeLength += authenticateClientOkDelayedDeviceChange.decode(is, false);
			return codeLength;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (authenticateClientOk != null) {
			sb.append("authenticateClientOk: ");
			authenticateClientOk.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (authenticateClientError != null) {
			sb.append("authenticateClientError: ").append(authenticateClientError);
			return;
		}

		if (authenticateClientOkRpm != null) {
			sb.append("authenticateClientOkRpm: ");
			authenticateClientOkRpm.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (authenticateClientOkDeviceChange != null) {
			sb.append("authenticateClientOkDeviceChange: ");
			authenticateClientOkDeviceChange.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (authenticateClientOkDelayedDeviceChange != null) {
			sb.append("authenticateClientOkDelayedDeviceChange: ");
			authenticateClientOkDelayedDeviceChange.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}


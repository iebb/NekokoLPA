/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.rspdefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import com.gsma.sgp.messages.pedefinitions.UICCCapability;
import com.gsma.sgp.messages.pkix1explicit88.Certificate;
import com.gsma.sgp.messages.pkix1explicit88.CertificateList;
import com.gsma.sgp.messages.pkix1explicit88.Time;
import com.gsma.sgp.messages.pkix1implicit88.SubjectKeyIdentifier;

public class DeviceChangeData implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private Iccid iccid = null;
	private BerUTF8String activationCodeForDc = null;
	private BerNull deleteOldProfile = null;
	private BerNull deleteNotificationForDcSupport = null;
	private BerUTF8String notificationAddress = null;
	private BerNull profileRecoverySupport = null;
	private BerGeneralizedTime profileRecoveryValidityPeriod = null;
	
	public DeviceChangeData() {
	}

	public DeviceChangeData(byte[] code) {
		this.code = code;
	}

	public void setIccid(Iccid iccid) {
		this.iccid = iccid;
	}

	public Iccid getIccid() {
		return iccid;
	}

	public void setActivationCodeForDc(BerUTF8String activationCodeForDc) {
		this.activationCodeForDc = activationCodeForDc;
	}

	public BerUTF8String getActivationCodeForDc() {
		return activationCodeForDc;
	}

	public void setDeleteOldProfile(BerNull deleteOldProfile) {
		this.deleteOldProfile = deleteOldProfile;
	}

	public BerNull getDeleteOldProfile() {
		return deleteOldProfile;
	}

	public void setDeleteNotificationForDcSupport(BerNull deleteNotificationForDcSupport) {
		this.deleteNotificationForDcSupport = deleteNotificationForDcSupport;
	}

	public BerNull getDeleteNotificationForDcSupport() {
		return deleteNotificationForDcSupport;
	}

	public void setNotificationAddress(BerUTF8String notificationAddress) {
		this.notificationAddress = notificationAddress;
	}

	public BerUTF8String getNotificationAddress() {
		return notificationAddress;
	}

	public void setProfileRecoverySupport(BerNull profileRecoverySupport) {
		this.profileRecoverySupport = profileRecoverySupport;
	}

	public BerNull getProfileRecoverySupport() {
		return profileRecoverySupport;
	}

	public void setProfileRecoveryValidityPeriod(BerGeneralizedTime profileRecoveryValidityPeriod) {
		this.profileRecoveryValidityPeriod = profileRecoveryValidityPeriod;
	}

	public BerGeneralizedTime getProfileRecoveryValidityPeriod() {
		return profileRecoveryValidityPeriod;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (profileRecoveryValidityPeriod != null) {
			codeLength += profileRecoveryValidityPeriod.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (profileRecoverySupport != null) {
			codeLength += profileRecoverySupport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (notificationAddress != null) {
			codeLength += notificationAddress.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (deleteNotificationForDcSupport != null) {
			codeLength += deleteNotificationForDcSupport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (deleteOldProfile != null) {
			codeLength += deleteOldProfile.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += activationCodeForDc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += iccid.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(Iccid.tag)) {
			iccid = new Iccid();
			subCodeLength += iccid.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			activationCodeForDc = new BerUTF8String();
			subCodeLength += activationCodeForDc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			deleteOldProfile = new BerNull();
			subCodeLength += deleteOldProfile.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			deleteNotificationForDcSupport = new BerNull();
			subCodeLength += deleteNotificationForDcSupport.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			notificationAddress = new BerUTF8String();
			subCodeLength += notificationAddress.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			profileRecoverySupport = new BerNull();
			subCodeLength += profileRecoverySupport.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			profileRecoveryValidityPeriod = new BerGeneralizedTime();
			subCodeLength += profileRecoveryValidityPeriod.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (iccid != null) {
			sb.append("iccid: ").append(iccid);
		}
		else {
			sb.append("iccid: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (activationCodeForDc != null) {
			sb.append("activationCodeForDc: ").append(activationCodeForDc);
		}
		else {
			sb.append("activationCodeForDc: <empty-required-field>");
		}
		
		if (deleteOldProfile != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("deleteOldProfile: ").append(deleteOldProfile);
		}
		
		if (deleteNotificationForDcSupport != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("deleteNotificationForDcSupport: ").append(deleteNotificationForDcSupport);
		}
		
		if (notificationAddress != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("notificationAddress: ").append(notificationAddress);
		}
		
		if (profileRecoverySupport != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("profileRecoverySupport: ").append(profileRecoverySupport);
		}
		
		if (profileRecoveryValidityPeriod != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("profileRecoveryValidityPeriod: ").append(profileRecoveryValidityPeriod);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


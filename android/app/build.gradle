// On top of your file import a JSON parser
import groovy.json.JsonSlurper

plugins {
    id 'io.sentry.android.gradle' version '4.11.0'
}

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'


android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "ee.nekoko.nlpa"

    def inputFile = new File("$rootDir/../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)

    defaultConfig {
        applicationId "ee.nekoko.nlpa"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode packageJson["buildVersion"]
        versionName packageJson["version"]
    }
    signingConfigs {
        community {
            storeFile file('debug.keystore')
            storePassword 'CommunityKey'
            keyAlias 'CommunityKey'
            keyPassword 'CommunityKey'
        }
        esim9 {
            storeFile file('9eSIMCommunityKey.jks')
            storePassword '147258369'
            keyAlias 'key0'
            keyPassword '147258369'
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.community
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.esim9
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }


    // ---------------------------------------------------------------------------------------------
    // Module dependencies
    // ---------------------------------------------------------------------------------------------
    implementation project(path: ':messages')
    implementation project(path: ':util')
    implementation project(path: ':core')

    // ---------------------------------------------------------------------------------------------
    // Identiv reader library
    // ---------------------------------------------------------------------------------------------

    // ConstraintLayout for profile list
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    // SwiperefreshLayout for profile list
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    // Preference
    implementation "androidx.preference:preference:1.2.1"
    // WorkManager
    implementation "androidx.work:work-runtime:2.9.1"


    // ASN1/BER codec
    implementation 'com.beanit:jasn1:1.11.3'

    // ---------------------------------------------------------------------------------------------
    // Lifecycle management
    // ---------------------------------------------------------------------------------------------
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.8.5"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.5"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:2.8.5"
    // Lifecycle runtime only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:2.8.5"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.8.5"
    // Annotation processor
    // annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:2.8.5"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:2.8.5"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:2.8.5"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:2.8.5"
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.google.android.datatransport:transport-api:2.2.1'

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Testing
    ////////////////////////////////////////////////////////////////////////////////////////////////
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.9.2"

    androidTestImplementation "androidx.test:rules:1.6.1"
    androidTestImplementation "androidx.test.ext:junit:1.2.1"

    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.6.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1"

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Compatibility
    ////////////////////////////////////////////////////////////////////////////////////////////////

    // Fixing Duplicate class kotlin.... issue
    // See: https://stackoverflow.com/questions/75263047/duplicate-class-in-kotlin-android
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }

}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)


sentry {
    org = "kosmoneko-ou-ud"
    projectName = "android"

    // this will upload your source code to Sentry to show it as part of the stack traces
    // disable if you don't want to expose your sources
    includeSourceContext = true
}

/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class PECSIM implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private PEHeader csimHeader = null;
	private BerObjectIdentifier templateID = null;
	private File adfCsim = null;
	private File efArr = null;
	private File efCallCount = null;
	private File efImsiM = null;
	private File efImsiT = null;
	private File efTmsi = null;
	private File efAh = null;
	private File efAop = null;
	private File efAloc = null;
	private File efCdmahome = null;
	private File efZnregi = null;
	private File efSnregi = null;
	private File efDistregi = null;
	private File efAccolc = null;
	private File efTerm = null;
	private File efAcp = null;
	private File efPrl = null;
	private File efRuimid = null;
	private File efCsimSt = null;
	private File efSpc = null;
	private File efOtapaspc = null;
	private File efNamlock = null;
	private File efOta = null;
	private File efSp = null;
	private File efEsnMeidMe = null;
	private File efLi = null;
	private File efUsgind = null;
	private File efAd = null;
	private File efMaxPrl = null;
	private File efSpcs = null;
	private File efMecrp = null;
	private File efHomeTag = null;
	private File efGroupTag = null;
	private File efSpecificTag = null;
	private File efCallPrompt = null;
	
	public PECSIM() {
	}

	public PECSIM(byte[] code) {
		this.code = code;
	}

	public void setCsimHeader(PEHeader csimHeader) {
		this.csimHeader = csimHeader;
	}

	public PEHeader getCsimHeader() {
		return csimHeader;
	}

	public void setTemplateID(BerObjectIdentifier templateID) {
		this.templateID = templateID;
	}

	public BerObjectIdentifier getTemplateID() {
		return templateID;
	}

	public void setAdfCsim(File adfCsim) {
		this.adfCsim = adfCsim;
	}

	public File getAdfCsim() {
		return adfCsim;
	}

	public void setEfArr(File efArr) {
		this.efArr = efArr;
	}

	public File getEfArr() {
		return efArr;
	}

	public void setEfCallCount(File efCallCount) {
		this.efCallCount = efCallCount;
	}

	public File getEfCallCount() {
		return efCallCount;
	}

	public void setEfImsiM(File efImsiM) {
		this.efImsiM = efImsiM;
	}

	public File getEfImsiM() {
		return efImsiM;
	}

	public void setEfImsiT(File efImsiT) {
		this.efImsiT = efImsiT;
	}

	public File getEfImsiT() {
		return efImsiT;
	}

	public void setEfTmsi(File efTmsi) {
		this.efTmsi = efTmsi;
	}

	public File getEfTmsi() {
		return efTmsi;
	}

	public void setEfAh(File efAh) {
		this.efAh = efAh;
	}

	public File getEfAh() {
		return efAh;
	}

	public void setEfAop(File efAop) {
		this.efAop = efAop;
	}

	public File getEfAop() {
		return efAop;
	}

	public void setEfAloc(File efAloc) {
		this.efAloc = efAloc;
	}

	public File getEfAloc() {
		return efAloc;
	}

	public void setEfCdmahome(File efCdmahome) {
		this.efCdmahome = efCdmahome;
	}

	public File getEfCdmahome() {
		return efCdmahome;
	}

	public void setEfZnregi(File efZnregi) {
		this.efZnregi = efZnregi;
	}

	public File getEfZnregi() {
		return efZnregi;
	}

	public void setEfSnregi(File efSnregi) {
		this.efSnregi = efSnregi;
	}

	public File getEfSnregi() {
		return efSnregi;
	}

	public void setEfDistregi(File efDistregi) {
		this.efDistregi = efDistregi;
	}

	public File getEfDistregi() {
		return efDistregi;
	}

	public void setEfAccolc(File efAccolc) {
		this.efAccolc = efAccolc;
	}

	public File getEfAccolc() {
		return efAccolc;
	}

	public void setEfTerm(File efTerm) {
		this.efTerm = efTerm;
	}

	public File getEfTerm() {
		return efTerm;
	}

	public void setEfAcp(File efAcp) {
		this.efAcp = efAcp;
	}

	public File getEfAcp() {
		return efAcp;
	}

	public void setEfPrl(File efPrl) {
		this.efPrl = efPrl;
	}

	public File getEfPrl() {
		return efPrl;
	}

	public void setEfRuimid(File efRuimid) {
		this.efRuimid = efRuimid;
	}

	public File getEfRuimid() {
		return efRuimid;
	}

	public void setEfCsimSt(File efCsimSt) {
		this.efCsimSt = efCsimSt;
	}

	public File getEfCsimSt() {
		return efCsimSt;
	}

	public void setEfSpc(File efSpc) {
		this.efSpc = efSpc;
	}

	public File getEfSpc() {
		return efSpc;
	}

	public void setEfOtapaspc(File efOtapaspc) {
		this.efOtapaspc = efOtapaspc;
	}

	public File getEfOtapaspc() {
		return efOtapaspc;
	}

	public void setEfNamlock(File efNamlock) {
		this.efNamlock = efNamlock;
	}

	public File getEfNamlock() {
		return efNamlock;
	}

	public void setEfOta(File efOta) {
		this.efOta = efOta;
	}

	public File getEfOta() {
		return efOta;
	}

	public void setEfSp(File efSp) {
		this.efSp = efSp;
	}

	public File getEfSp() {
		return efSp;
	}

	public void setEfEsnMeidMe(File efEsnMeidMe) {
		this.efEsnMeidMe = efEsnMeidMe;
	}

	public File getEfEsnMeidMe() {
		return efEsnMeidMe;
	}

	public void setEfLi(File efLi) {
		this.efLi = efLi;
	}

	public File getEfLi() {
		return efLi;
	}

	public void setEfUsgind(File efUsgind) {
		this.efUsgind = efUsgind;
	}

	public File getEfUsgind() {
		return efUsgind;
	}

	public void setEfAd(File efAd) {
		this.efAd = efAd;
	}

	public File getEfAd() {
		return efAd;
	}

	public void setEfMaxPrl(File efMaxPrl) {
		this.efMaxPrl = efMaxPrl;
	}

	public File getEfMaxPrl() {
		return efMaxPrl;
	}

	public void setEfSpcs(File efSpcs) {
		this.efSpcs = efSpcs;
	}

	public File getEfSpcs() {
		return efSpcs;
	}

	public void setEfMecrp(File efMecrp) {
		this.efMecrp = efMecrp;
	}

	public File getEfMecrp() {
		return efMecrp;
	}

	public void setEfHomeTag(File efHomeTag) {
		this.efHomeTag = efHomeTag;
	}

	public File getEfHomeTag() {
		return efHomeTag;
	}

	public void setEfGroupTag(File efGroupTag) {
		this.efGroupTag = efGroupTag;
	}

	public File getEfGroupTag() {
		return efGroupTag;
	}

	public void setEfSpecificTag(File efSpecificTag) {
		this.efSpecificTag = efSpecificTag;
	}

	public File getEfSpecificTag() {
		return efSpecificTag;
	}

	public void setEfCallPrompt(File efCallPrompt) {
		this.efCallPrompt = efCallPrompt;
	}

	public File getEfCallPrompt() {
		return efCallPrompt;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += efCallPrompt.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
		reverseOS.write(0x24);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efSpecificTag.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
		reverseOS.write(0x23);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efGroupTag.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
		reverseOS.write(0x22);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efHomeTag.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 33
		reverseOS.write(0x21);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efMecrp.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
		reverseOS.write(0x20);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efSpcs.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 31
		reverseOS.write(0x1F);
		reverseOS.write(0xBF);
		codeLength += 2;
		
		codeLength += efMaxPrl.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
		reverseOS.write(0xBE);
		codeLength += 1;
		
		codeLength += efAd.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 29
		reverseOS.write(0xBD);
		codeLength += 1;
		
		codeLength += efUsgind.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 28
		reverseOS.write(0xBC);
		codeLength += 1;
		
		codeLength += efLi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
		reverseOS.write(0xBB);
		codeLength += 1;
		
		codeLength += efEsnMeidMe.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
		reverseOS.write(0xBA);
		codeLength += 1;
		
		codeLength += efSp.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 25
		reverseOS.write(0xB9);
		codeLength += 1;
		
		codeLength += efOta.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
		reverseOS.write(0xB8);
		codeLength += 1;
		
		codeLength += efNamlock.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
		reverseOS.write(0xB7);
		codeLength += 1;
		
		codeLength += efOtapaspc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
		reverseOS.write(0xB6);
		codeLength += 1;
		
		codeLength += efSpc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
		reverseOS.write(0xB5);
		codeLength += 1;
		
		codeLength += efCsimSt.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
		reverseOS.write(0xB4);
		codeLength += 1;
		
		codeLength += efRuimid.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
		reverseOS.write(0xB3);
		codeLength += 1;
		
		codeLength += efPrl.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
		reverseOS.write(0xB2);
		codeLength += 1;
		
		codeLength += efAcp.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
		reverseOS.write(0xB1);
		codeLength += 1;
		
		codeLength += efTerm.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
		reverseOS.write(0xB0);
		codeLength += 1;
		
		codeLength += efAccolc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
		reverseOS.write(0xAF);
		codeLength += 1;
		
		codeLength += efDistregi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
		reverseOS.write(0xAE);
		codeLength += 1;
		
		codeLength += efSnregi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
		reverseOS.write(0xAD);
		codeLength += 1;
		
		codeLength += efZnregi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
		reverseOS.write(0xAC);
		codeLength += 1;
		
		codeLength += efCdmahome.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
		reverseOS.write(0xAB);
		codeLength += 1;
		
		codeLength += efAloc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
		reverseOS.write(0xAA);
		codeLength += 1;
		
		codeLength += efAop.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
		reverseOS.write(0xA9);
		codeLength += 1;
		
		codeLength += efAh.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
		reverseOS.write(0xA8);
		codeLength += 1;
		
		codeLength += efTmsi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
		reverseOS.write(0xA7);
		codeLength += 1;
		
		codeLength += efImsiT.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
		reverseOS.write(0xA6);
		codeLength += 1;
		
		codeLength += efImsiM.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
		reverseOS.write(0xA5);
		codeLength += 1;
		
		codeLength += efCallCount.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
		reverseOS.write(0xA4);
		codeLength += 1;
		
		codeLength += efArr.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
		reverseOS.write(0xA3);
		codeLength += 1;
		
		codeLength += adfCsim.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
		reverseOS.write(0xA2);
		codeLength += 1;
		
		codeLength += templateID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += csimHeader.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			csimHeader = new PEHeader();
			subCodeLength += csimHeader.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			adfCsim = new File();
			subCodeLength += adfCsim.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			efArr = new File();
			subCodeLength += efArr.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			efCallCount = new File();
			subCodeLength += efCallCount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			efImsiM = new File();
			subCodeLength += efImsiM.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			efImsiT = new File();
			subCodeLength += efImsiT.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			efTmsi = new File();
			subCodeLength += efTmsi.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			efAh = new File();
			subCodeLength += efAh.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			efAop = new File();
			subCodeLength += efAop.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			efAloc = new File();
			subCodeLength += efAloc.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			efCdmahome = new File();
			subCodeLength += efCdmahome.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			efZnregi = new File();
			subCodeLength += efZnregi.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			efSnregi = new File();
			subCodeLength += efSnregi.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			efDistregi = new File();
			subCodeLength += efDistregi.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			efAccolc = new File();
			subCodeLength += efAccolc.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			efTerm = new File();
			subCodeLength += efTerm.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			efAcp = new File();
			subCodeLength += efAcp.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			efPrl = new File();
			subCodeLength += efPrl.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			efRuimid = new File();
			subCodeLength += efRuimid.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			efCsimSt = new File();
			subCodeLength += efCsimSt.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			efSpc = new File();
			subCodeLength += efSpc.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			efOtapaspc = new File();
			subCodeLength += efOtapaspc.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			efNamlock = new File();
			subCodeLength += efNamlock.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
			efOta = new File();
			subCodeLength += efOta.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
			efSp = new File();
			subCodeLength += efSp.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
			efEsnMeidMe = new File();
			subCodeLength += efEsnMeidMe.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
			efLi = new File();
			subCodeLength += efLi.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
			efUsgind = new File();
			subCodeLength += efUsgind.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 29)) {
			efAd = new File();
			subCodeLength += efAd.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			efMaxPrl = new File();
			subCodeLength += efMaxPrl.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
			efSpcs = new File();
			subCodeLength += efSpcs.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
			efMecrp = new File();
			subCodeLength += efMecrp.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
			efHomeTag = new File();
			subCodeLength += efHomeTag.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
			efGroupTag = new File();
			subCodeLength += efGroupTag.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			efSpecificTag = new File();
			subCodeLength += efSpecificTag.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
			efCallPrompt = new File();
			subCodeLength += efCallPrompt.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (csimHeader != null) {
			sb.append("csimHeader: ");
			csimHeader.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("csimHeader: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (templateID != null) {
			sb.append("templateID: ").append(templateID);
		}
		else {
			sb.append("templateID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (adfCsim != null) {
			sb.append("adfCsim: ");
			adfCsim.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("adfCsim: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efArr != null) {
			sb.append("efArr: ");
			efArr.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efArr: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efCallCount != null) {
			sb.append("efCallCount: ");
			efCallCount.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efCallCount: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efImsiM != null) {
			sb.append("efImsiM: ");
			efImsiM.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efImsiM: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efImsiT != null) {
			sb.append("efImsiT: ");
			efImsiT.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efImsiT: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efTmsi != null) {
			sb.append("efTmsi: ");
			efTmsi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efTmsi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAh != null) {
			sb.append("efAh: ");
			efAh.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAh: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAop != null) {
			sb.append("efAop: ");
			efAop.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAop: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAloc != null) {
			sb.append("efAloc: ");
			efAloc.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAloc: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efCdmahome != null) {
			sb.append("efCdmahome: ");
			efCdmahome.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efCdmahome: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efZnregi != null) {
			sb.append("efZnregi: ");
			efZnregi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efZnregi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSnregi != null) {
			sb.append("efSnregi: ");
			efSnregi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSnregi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efDistregi != null) {
			sb.append("efDistregi: ");
			efDistregi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efDistregi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAccolc != null) {
			sb.append("efAccolc: ");
			efAccolc.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAccolc: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efTerm != null) {
			sb.append("efTerm: ");
			efTerm.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efTerm: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAcp != null) {
			sb.append("efAcp: ");
			efAcp.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAcp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efPrl != null) {
			sb.append("efPrl: ");
			efPrl.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efPrl: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efRuimid != null) {
			sb.append("efRuimid: ");
			efRuimid.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efRuimid: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efCsimSt != null) {
			sb.append("efCsimSt: ");
			efCsimSt.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efCsimSt: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSpc != null) {
			sb.append("efSpc: ");
			efSpc.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSpc: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efOtapaspc != null) {
			sb.append("efOtapaspc: ");
			efOtapaspc.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efOtapaspc: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efNamlock != null) {
			sb.append("efNamlock: ");
			efNamlock.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efNamlock: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efOta != null) {
			sb.append("efOta: ");
			efOta.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efOta: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSp != null) {
			sb.append("efSp: ");
			efSp.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efEsnMeidMe != null) {
			sb.append("efEsnMeidMe: ");
			efEsnMeidMe.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efEsnMeidMe: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efLi != null) {
			sb.append("efLi: ");
			efLi.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efLi: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efUsgind != null) {
			sb.append("efUsgind: ");
			efUsgind.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efUsgind: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efAd != null) {
			sb.append("efAd: ");
			efAd.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efAd: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efMaxPrl != null) {
			sb.append("efMaxPrl: ");
			efMaxPrl.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efMaxPrl: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSpcs != null) {
			sb.append("efSpcs: ");
			efSpcs.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSpcs: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efMecrp != null) {
			sb.append("efMecrp: ");
			efMecrp.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efMecrp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efHomeTag != null) {
			sb.append("efHomeTag: ");
			efHomeTag.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efHomeTag: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efGroupTag != null) {
			sb.append("efGroupTag: ");
			efGroupTag.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efGroupTag: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efSpecificTag != null) {
			sb.append("efSpecificTag: ");
			efSpecificTag.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efSpecificTag: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (efCallPrompt != null) {
			sb.append("efCallPrompt: ");
			efCallPrompt.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("efCallPrompt: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class PECDMAParameter implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private PEHeader cdmaHeader = null;
	private BerOctetString authenticationKey = null;
	private BerOctetString ssd = null;
	private BerOctetString hrpdAccessAuthenticationData = null;
	private BerOctetString simpleIPAuthenticationData = null;
	private BerOctetString mobileIPAuthenticationData = null;
	
	public PECDMAParameter() {
	}

	public PECDMAParameter(byte[] code) {
		this.code = code;
	}

	public void setCdmaHeader(PEHeader cdmaHeader) {
		this.cdmaHeader = cdmaHeader;
	}

	public PEHeader getCdmaHeader() {
		return cdmaHeader;
	}

	public void setAuthenticationKey(BerOctetString authenticationKey) {
		this.authenticationKey = authenticationKey;
	}

	public BerOctetString getAuthenticationKey() {
		return authenticationKey;
	}

	public void setSsd(BerOctetString ssd) {
		this.ssd = ssd;
	}

	public BerOctetString getSsd() {
		return ssd;
	}

	public void setHrpdAccessAuthenticationData(BerOctetString hrpdAccessAuthenticationData) {
		this.hrpdAccessAuthenticationData = hrpdAccessAuthenticationData;
	}

	public BerOctetString getHrpdAccessAuthenticationData() {
		return hrpdAccessAuthenticationData;
	}

	public void setSimpleIPAuthenticationData(BerOctetString simpleIPAuthenticationData) {
		this.simpleIPAuthenticationData = simpleIPAuthenticationData;
	}

	public BerOctetString getSimpleIPAuthenticationData() {
		return simpleIPAuthenticationData;
	}

	public void setMobileIPAuthenticationData(BerOctetString mobileIPAuthenticationData) {
		this.mobileIPAuthenticationData = mobileIPAuthenticationData;
	}

	public BerOctetString getMobileIPAuthenticationData() {
		return mobileIPAuthenticationData;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (mobileIPAuthenticationData != null) {
			codeLength += mobileIPAuthenticationData.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (simpleIPAuthenticationData != null) {
			codeLength += simpleIPAuthenticationData.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (hrpdAccessAuthenticationData != null) {
			codeLength += hrpdAccessAuthenticationData.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (ssd != null) {
			codeLength += ssd.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		codeLength += authenticationKey.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += cdmaHeader.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			cdmaHeader = new PEHeader();
			subCodeLength += cdmaHeader.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			authenticationKey = new BerOctetString();
			subCodeLength += authenticationKey.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			ssd = new BerOctetString();
			subCodeLength += ssd.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			hrpdAccessAuthenticationData = new BerOctetString();
			subCodeLength += hrpdAccessAuthenticationData.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			simpleIPAuthenticationData = new BerOctetString();
			subCodeLength += simpleIPAuthenticationData.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			mobileIPAuthenticationData = new BerOctetString();
			subCodeLength += mobileIPAuthenticationData.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cdmaHeader != null) {
			sb.append("cdmaHeader: ");
			cdmaHeader.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("cdmaHeader: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (authenticationKey != null) {
			sb.append("authenticationKey: ").append(authenticationKey);
		}
		else {
			sb.append("authenticationKey: <empty-required-field>");
		}
		
		if (ssd != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ssd: ").append(ssd);
		}
		
		if (hrpdAccessAuthenticationData != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("hrpdAccessAuthenticationData: ").append(hrpdAccessAuthenticationData);
		}
		
		if (simpleIPAuthenticationData != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("simpleIPAuthenticationData: ").append(simpleIPAuthenticationData);
		}
		
		if (mobileIPAuthenticationData != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mobileIPAuthenticationData: ").append(mobileIPAuthenticationData);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


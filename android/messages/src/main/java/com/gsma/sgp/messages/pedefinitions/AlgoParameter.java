/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class AlgoParameter implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger algorithmID = null;
	private BerOctetString algorithmOptions = null;
	private BerOctetString key = null;
	private BerOctetString opc = null;
	private BerOctetString rotationConstants = null;
	private BerOctetString xoringConstants = null;
	private BerOctetString authCounterMax = null;
	private UInt8 numberOfKeccak = null;
	
	public AlgoParameter() {
	}

	public AlgoParameter(byte[] code) {
		this.code = code;
	}

	public void setAlgorithmID(BerInteger algorithmID) {
		this.algorithmID = algorithmID;
	}

	public BerInteger getAlgorithmID() {
		return algorithmID;
	}

	public void setAlgorithmOptions(BerOctetString algorithmOptions) {
		this.algorithmOptions = algorithmOptions;
	}

	public BerOctetString getAlgorithmOptions() {
		return algorithmOptions;
	}

	public void setKey(BerOctetString key) {
		this.key = key;
	}

	public BerOctetString getKey() {
		return key;
	}

	public void setOpc(BerOctetString opc) {
		this.opc = opc;
	}

	public BerOctetString getOpc() {
		return opc;
	}

	public void setRotationConstants(BerOctetString rotationConstants) {
		this.rotationConstants = rotationConstants;
	}

	public BerOctetString getRotationConstants() {
		return rotationConstants;
	}

	public void setXoringConstants(BerOctetString xoringConstants) {
		this.xoringConstants = xoringConstants;
	}

	public BerOctetString getXoringConstants() {
		return xoringConstants;
	}

	public void setAuthCounterMax(BerOctetString authCounterMax) {
		this.authCounterMax = authCounterMax;
	}

	public BerOctetString getAuthCounterMax() {
		return authCounterMax;
	}

	public void setNumberOfKeccak(UInt8 numberOfKeccak) {
		this.numberOfKeccak = numberOfKeccak;
	}

	public UInt8 getNumberOfKeccak() {
		return numberOfKeccak;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (numberOfKeccak != null) {
			codeLength += numberOfKeccak.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (authCounterMax != null) {
			codeLength += authCounterMax.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (xoringConstants != null) {
			codeLength += xoringConstants.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (rotationConstants != null) {
			codeLength += rotationConstants.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		codeLength += opc.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += key.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += algorithmOptions.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += algorithmID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			algorithmID = new BerInteger();
			subCodeLength += algorithmID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			algorithmOptions = new BerOctetString();
			subCodeLength += algorithmOptions.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			key = new BerOctetString();
			subCodeLength += key.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			opc = new BerOctetString();
			subCodeLength += opc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			rotationConstants = new BerOctetString();
			subCodeLength += rotationConstants.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			xoringConstants = new BerOctetString();
			subCodeLength += xoringConstants.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			authCounterMax = new BerOctetString();
			subCodeLength += authCounterMax.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			numberOfKeccak = new UInt8();
			subCodeLength += numberOfKeccak.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (algorithmID != null) {
			sb.append("algorithmID: ").append(algorithmID);
		}
		else {
			sb.append("algorithmID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (algorithmOptions != null) {
			sb.append("algorithmOptions: ").append(algorithmOptions);
		}
		else {
			sb.append("algorithmOptions: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (key != null) {
			sb.append("key: ").append(key);
		}
		else {
			sb.append("key: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (opc != null) {
			sb.append("opc: ").append(opc);
		}
		else {
			sb.append("opc: <empty-required-field>");
		}
		
		if (rotationConstants != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rotationConstants: ").append(rotationConstants);
		}
		
		if (xoringConstants != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("xoringConstants: ").append(xoringConstants);
		}
		
		if (authCounterMax != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("authCounterMax: ").append(authCounterMax);
		}
		
		if (numberOfKeccak != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("numberOfKeccak: ").append(numberOfKeccak);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


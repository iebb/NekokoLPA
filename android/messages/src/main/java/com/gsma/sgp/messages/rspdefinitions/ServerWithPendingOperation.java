/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.rspdefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import com.gsma.sgp.messages.pedefinitions.UICCCapability;
import com.gsma.sgp.messages.pkix1explicit88.Certificate;
import com.gsma.sgp.messages.pkix1explicit88.CertificateList;
import com.gsma.sgp.messages.pkix1explicit88.Time;
import com.gsma.sgp.messages.pkix1implicit88.SubjectKeyIdentifier;

public class ServerWithPendingOperation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private BerNull pollingAddress = null;
	private BerNull rootSmds = null;
	private BerNull defaultSmdp = null;
	private BerUTF8String explicitAddress = null;
	
	public ServerWithPendingOperation() {
	}

	public ServerWithPendingOperation(byte[] code) {
		this.code = code;
	}

	public void setPollingAddress(BerNull pollingAddress) {
		this.pollingAddress = pollingAddress;
	}

	public BerNull getPollingAddress() {
		return pollingAddress;
	}

	public void setRootSmds(BerNull rootSmds) {
		this.rootSmds = rootSmds;
	}

	public BerNull getRootSmds() {
		return rootSmds;
	}

	public void setDefaultSmdp(BerNull defaultSmdp) {
		this.defaultSmdp = defaultSmdp;
	}

	public BerNull getDefaultSmdp() {
		return defaultSmdp;
	}

	public void setExplicitAddress(BerUTF8String explicitAddress) {
		this.explicitAddress = explicitAddress;
	}

	public BerUTF8String getExplicitAddress() {
		return explicitAddress;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (explicitAddress != null) {
			codeLength += explicitAddress.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
			return codeLength;
		}
		
		if (defaultSmdp != null) {
			codeLength += defaultSmdp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			return codeLength;
		}
		
		if (rootSmds != null) {
			codeLength += rootSmds.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		if (pollingAddress != null) {
			codeLength += pollingAddress.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			pollingAddress = new BerNull();
			codeLength += pollingAddress.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			rootSmds = new BerNull();
			codeLength += rootSmds.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			defaultSmdp = new BerNull();
			codeLength += defaultSmdp.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			explicitAddress = new BerUTF8String();
			codeLength += explicitAddress.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (pollingAddress != null) {
			sb.append("pollingAddress: ").append(pollingAddress);
			return;
		}

		if (rootSmds != null) {
			sb.append("rootSmds: ").append(rootSmds);
			return;
		}

		if (defaultSmdp != null) {
			sb.append("defaultSmdp: ").append(defaultSmdp);
			return;
		}

		if (explicitAddress != null) {
			sb.append("explicitAddress: ").append(explicitAddress);
			return;
		}

		sb.append("<none>");
	}

}


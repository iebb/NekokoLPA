/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class PEOPTUSIM implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private PEHeader optusimHeader = null;
	private BerObjectIdentifier templateID = null;
	private File efLi = null;
	private File efAcmax = null;
	private File efAcm = null;
	private File efGid1 = null;
	private File efGid2 = null;
	private File efMsisdn = null;
	private File efPuct = null;
	private File efCbmi = null;
	private File efCbmid = null;
	private File efSdn = null;
	private File efExt2 = null;
	private File efExt3 = null;
	private File efCbmir = null;
	private File efPlmnwact = null;
	private File efOplmnwact = null;
	private File efHplmnwact = null;
	private File efDck = null;
	private File efCnl = null;
	private File efSmsr = null;
	private File efBdn = null;
	private File efExt5 = null;
	private File efCcp2 = null;
	private File efExt4 = null;
	private File efAcl = null;
	private File efCmi = null;
	private File efIci = null;
	private File efOci = null;
	private File efIct = null;
	private File efOct = null;
	private File efVgcs = null;
	private File efVgcss = null;
	private File efVbs = null;
	private File efVbss = null;
	private File efEmlpp = null;
	private File efAaem = null;
	private File efHiddenkey = null;
	private File efPnn = null;
	private File efOpl = null;
	private File efMbdn = null;
	private File efExt6 = null;
	private File efMbi = null;
	private File efMwis = null;
	private File efCfis = null;
	private File efExt7 = null;
	private File efSpdi = null;
	private File efMmsn = null;
	private File efExt8 = null;
	private File efMmsicp = null;
	private File efMmsup = null;
	private File efMmsucp = null;
	private File efNia = null;
	private File efVgcsca = null;
	private File efVbsca = null;
	private File efGbabp = null;
	private File efMsk = null;
	private File efMuk = null;
	private File efEhplmn = null;
	private File efGbanl = null;
	private File efEhplmnpi = null;
	private File efLrplmnsi = null;
	private File efNafkca = null;
	private File efSpni = null;
	private File efPnni = null;
	private File efNcpIp = null;
	private File efUfc = null;
	private File efNasconfig = null;
	private File efUicciari = null;
	private File efPws = null;
	private File efFdnuri = null;
	private File efBdnuri = null;
	private File efSdnuri = null;
	private File efIwl = null;
	private File efIps = null;
	private File efIpd = null;
	private File efEpdgid = null;
	private File efEpdgselection = null;
	private File efEpdgidem = null;
	private File efEpdgselectionem = null;
	private File efFrompreferred = null;
	private File efImsconfigdata = null;
	private File ef3gpppsdataoff = null;
	private File ef3gpppsdataoffservicelist = null;
	private File efXcapconfigdata = null;
	private File efEarfcnlist = null;
	private File efMudmidconfigdata = null;
	
	public PEOPTUSIM() {
	}

	public PEOPTUSIM(byte[] code) {
		this.code = code;
	}

	public void setOptusimHeader(PEHeader optusimHeader) {
		this.optusimHeader = optusimHeader;
	}

	public PEHeader getOptusimHeader() {
		return optusimHeader;
	}

	public void setTemplateID(BerObjectIdentifier templateID) {
		this.templateID = templateID;
	}

	public BerObjectIdentifier getTemplateID() {
		return templateID;
	}

	public void setEfLi(File efLi) {
		this.efLi = efLi;
	}

	public File getEfLi() {
		return efLi;
	}

	public void setEfAcmax(File efAcmax) {
		this.efAcmax = efAcmax;
	}

	public File getEfAcmax() {
		return efAcmax;
	}

	public void setEfAcm(File efAcm) {
		this.efAcm = efAcm;
	}

	public File getEfAcm() {
		return efAcm;
	}

	public void setEfGid1(File efGid1) {
		this.efGid1 = efGid1;
	}

	public File getEfGid1() {
		return efGid1;
	}

	public void setEfGid2(File efGid2) {
		this.efGid2 = efGid2;
	}

	public File getEfGid2() {
		return efGid2;
	}

	public void setEfMsisdn(File efMsisdn) {
		this.efMsisdn = efMsisdn;
	}

	public File getEfMsisdn() {
		return efMsisdn;
	}

	public void setEfPuct(File efPuct) {
		this.efPuct = efPuct;
	}

	public File getEfPuct() {
		return efPuct;
	}

	public void setEfCbmi(File efCbmi) {
		this.efCbmi = efCbmi;
	}

	public File getEfCbmi() {
		return efCbmi;
	}

	public void setEfCbmid(File efCbmid) {
		this.efCbmid = efCbmid;
	}

	public File getEfCbmid() {
		return efCbmid;
	}

	public void setEfSdn(File efSdn) {
		this.efSdn = efSdn;
	}

	public File getEfSdn() {
		return efSdn;
	}

	public void setEfExt2(File efExt2) {
		this.efExt2 = efExt2;
	}

	public File getEfExt2() {
		return efExt2;
	}

	public void setEfExt3(File efExt3) {
		this.efExt3 = efExt3;
	}

	public File getEfExt3() {
		return efExt3;
	}

	public void setEfCbmir(File efCbmir) {
		this.efCbmir = efCbmir;
	}

	public File getEfCbmir() {
		return efCbmir;
	}

	public void setEfPlmnwact(File efPlmnwact) {
		this.efPlmnwact = efPlmnwact;
	}

	public File getEfPlmnwact() {
		return efPlmnwact;
	}

	public void setEfOplmnwact(File efOplmnwact) {
		this.efOplmnwact = efOplmnwact;
	}

	public File getEfOplmnwact() {
		return efOplmnwact;
	}

	public void setEfHplmnwact(File efHplmnwact) {
		this.efHplmnwact = efHplmnwact;
	}

	public File getEfHplmnwact() {
		return efHplmnwact;
	}

	public void setEfDck(File efDck) {
		this.efDck = efDck;
	}

	public File getEfDck() {
		return efDck;
	}

	public void setEfCnl(File efCnl) {
		this.efCnl = efCnl;
	}

	public File getEfCnl() {
		return efCnl;
	}

	public void setEfSmsr(File efSmsr) {
		this.efSmsr = efSmsr;
	}

	public File getEfSmsr() {
		return efSmsr;
	}

	public void setEfBdn(File efBdn) {
		this.efBdn = efBdn;
	}

	public File getEfBdn() {
		return efBdn;
	}

	public void setEfExt5(File efExt5) {
		this.efExt5 = efExt5;
	}

	public File getEfExt5() {
		return efExt5;
	}

	public void setEfCcp2(File efCcp2) {
		this.efCcp2 = efCcp2;
	}

	public File getEfCcp2() {
		return efCcp2;
	}

	public void setEfExt4(File efExt4) {
		this.efExt4 = efExt4;
	}

	public File getEfExt4() {
		return efExt4;
	}

	public void setEfAcl(File efAcl) {
		this.efAcl = efAcl;
	}

	public File getEfAcl() {
		return efAcl;
	}

	public void setEfCmi(File efCmi) {
		this.efCmi = efCmi;
	}

	public File getEfCmi() {
		return efCmi;
	}

	public void setEfIci(File efIci) {
		this.efIci = efIci;
	}

	public File getEfIci() {
		return efIci;
	}

	public void setEfOci(File efOci) {
		this.efOci = efOci;
	}

	public File getEfOci() {
		return efOci;
	}

	public void setEfIct(File efIct) {
		this.efIct = efIct;
	}

	public File getEfIct() {
		return efIct;
	}

	public void setEfOct(File efOct) {
		this.efOct = efOct;
	}

	public File getEfOct() {
		return efOct;
	}

	public void setEfVgcs(File efVgcs) {
		this.efVgcs = efVgcs;
	}

	public File getEfVgcs() {
		return efVgcs;
	}

	public void setEfVgcss(File efVgcss) {
		this.efVgcss = efVgcss;
	}

	public File getEfVgcss() {
		return efVgcss;
	}

	public void setEfVbs(File efVbs) {
		this.efVbs = efVbs;
	}

	public File getEfVbs() {
		return efVbs;
	}

	public void setEfVbss(File efVbss) {
		this.efVbss = efVbss;
	}

	public File getEfVbss() {
		return efVbss;
	}

	public void setEfEmlpp(File efEmlpp) {
		this.efEmlpp = efEmlpp;
	}

	public File getEfEmlpp() {
		return efEmlpp;
	}

	public void setEfAaem(File efAaem) {
		this.efAaem = efAaem;
	}

	public File getEfAaem() {
		return efAaem;
	}

	public void setEfHiddenkey(File efHiddenkey) {
		this.efHiddenkey = efHiddenkey;
	}

	public File getEfHiddenkey() {
		return efHiddenkey;
	}

	public void setEfPnn(File efPnn) {
		this.efPnn = efPnn;
	}

	public File getEfPnn() {
		return efPnn;
	}

	public void setEfOpl(File efOpl) {
		this.efOpl = efOpl;
	}

	public File getEfOpl() {
		return efOpl;
	}

	public void setEfMbdn(File efMbdn) {
		this.efMbdn = efMbdn;
	}

	public File getEfMbdn() {
		return efMbdn;
	}

	public void setEfExt6(File efExt6) {
		this.efExt6 = efExt6;
	}

	public File getEfExt6() {
		return efExt6;
	}

	public void setEfMbi(File efMbi) {
		this.efMbi = efMbi;
	}

	public File getEfMbi() {
		return efMbi;
	}

	public void setEfMwis(File efMwis) {
		this.efMwis = efMwis;
	}

	public File getEfMwis() {
		return efMwis;
	}

	public void setEfCfis(File efCfis) {
		this.efCfis = efCfis;
	}

	public File getEfCfis() {
		return efCfis;
	}

	public void setEfExt7(File efExt7) {
		this.efExt7 = efExt7;
	}

	public File getEfExt7() {
		return efExt7;
	}

	public void setEfSpdi(File efSpdi) {
		this.efSpdi = efSpdi;
	}

	public File getEfSpdi() {
		return efSpdi;
	}

	public void setEfMmsn(File efMmsn) {
		this.efMmsn = efMmsn;
	}

	public File getEfMmsn() {
		return efMmsn;
	}

	public void setEfExt8(File efExt8) {
		this.efExt8 = efExt8;
	}

	public File getEfExt8() {
		return efExt8;
	}

	public void setEfMmsicp(File efMmsicp) {
		this.efMmsicp = efMmsicp;
	}

	public File getEfMmsicp() {
		return efMmsicp;
	}

	public void setEfMmsup(File efMmsup) {
		this.efMmsup = efMmsup;
	}

	public File getEfMmsup() {
		return efMmsup;
	}

	public void setEfMmsucp(File efMmsucp) {
		this.efMmsucp = efMmsucp;
	}

	public File getEfMmsucp() {
		return efMmsucp;
	}

	public void setEfNia(File efNia) {
		this.efNia = efNia;
	}

	public File getEfNia() {
		return efNia;
	}

	public void setEfVgcsca(File efVgcsca) {
		this.efVgcsca = efVgcsca;
	}

	public File getEfVgcsca() {
		return efVgcsca;
	}

	public void setEfVbsca(File efVbsca) {
		this.efVbsca = efVbsca;
	}

	public File getEfVbsca() {
		return efVbsca;
	}

	public void setEfGbabp(File efGbabp) {
		this.efGbabp = efGbabp;
	}

	public File getEfGbabp() {
		return efGbabp;
	}

	public void setEfMsk(File efMsk) {
		this.efMsk = efMsk;
	}

	public File getEfMsk() {
		return efMsk;
	}

	public void setEfMuk(File efMuk) {
		this.efMuk = efMuk;
	}

	public File getEfMuk() {
		return efMuk;
	}

	public void setEfEhplmn(File efEhplmn) {
		this.efEhplmn = efEhplmn;
	}

	public File getEfEhplmn() {
		return efEhplmn;
	}

	public void setEfGbanl(File efGbanl) {
		this.efGbanl = efGbanl;
	}

	public File getEfGbanl() {
		return efGbanl;
	}

	public void setEfEhplmnpi(File efEhplmnpi) {
		this.efEhplmnpi = efEhplmnpi;
	}

	public File getEfEhplmnpi() {
		return efEhplmnpi;
	}

	public void setEfLrplmnsi(File efLrplmnsi) {
		this.efLrplmnsi = efLrplmnsi;
	}

	public File getEfLrplmnsi() {
		return efLrplmnsi;
	}

	public void setEfNafkca(File efNafkca) {
		this.efNafkca = efNafkca;
	}

	public File getEfNafkca() {
		return efNafkca;
	}

	public void setEfSpni(File efSpni) {
		this.efSpni = efSpni;
	}

	public File getEfSpni() {
		return efSpni;
	}

	public void setEfPnni(File efPnni) {
		this.efPnni = efPnni;
	}

	public File getEfPnni() {
		return efPnni;
	}

	public void setEfNcpIp(File efNcpIp) {
		this.efNcpIp = efNcpIp;
	}

	public File getEfNcpIp() {
		return efNcpIp;
	}

	public void setEfUfc(File efUfc) {
		this.efUfc = efUfc;
	}

	public File getEfUfc() {
		return efUfc;
	}

	public void setEfNasconfig(File efNasconfig) {
		this.efNasconfig = efNasconfig;
	}

	public File getEfNasconfig() {
		return efNasconfig;
	}

	public void setEfUicciari(File efUicciari) {
		this.efUicciari = efUicciari;
	}

	public File getEfUicciari() {
		return efUicciari;
	}

	public void setEfPws(File efPws) {
		this.efPws = efPws;
	}

	public File getEfPws() {
		return efPws;
	}

	public void setEfFdnuri(File efFdnuri) {
		this.efFdnuri = efFdnuri;
	}

	public File getEfFdnuri() {
		return efFdnuri;
	}

	public void setEfBdnuri(File efBdnuri) {
		this.efBdnuri = efBdnuri;
	}

	public File getEfBdnuri() {
		return efBdnuri;
	}

	public void setEfSdnuri(File efSdnuri) {
		this.efSdnuri = efSdnuri;
	}

	public File getEfSdnuri() {
		return efSdnuri;
	}

	public void setEfIwl(File efIwl) {
		this.efIwl = efIwl;
	}

	public File getEfIwl() {
		return efIwl;
	}

	public void setEfIps(File efIps) {
		this.efIps = efIps;
	}

	public File getEfIps() {
		return efIps;
	}

	public void setEfIpd(File efIpd) {
		this.efIpd = efIpd;
	}

	public File getEfIpd() {
		return efIpd;
	}

	public void setEfEpdgid(File efEpdgid) {
		this.efEpdgid = efEpdgid;
	}

	public File getEfEpdgid() {
		return efEpdgid;
	}

	public void setEfEpdgselection(File efEpdgselection) {
		this.efEpdgselection = efEpdgselection;
	}

	public File getEfEpdgselection() {
		return efEpdgselection;
	}

	public void setEfEpdgidem(File efEpdgidem) {
		this.efEpdgidem = efEpdgidem;
	}

	public File getEfEpdgidem() {
		return efEpdgidem;
	}

	public void setEfEpdgselectionem(File efEpdgselectionem) {
		this.efEpdgselectionem = efEpdgselectionem;
	}

	public File getEfEpdgselectionem() {
		return efEpdgselectionem;
	}

	public void setEfFrompreferred(File efFrompreferred) {
		this.efFrompreferred = efFrompreferred;
	}

	public File getEfFrompreferred() {
		return efFrompreferred;
	}

	public void setEfImsconfigdata(File efImsconfigdata) {
		this.efImsconfigdata = efImsconfigdata;
	}

	public File getEfImsconfigdata() {
		return efImsconfigdata;
	}

	public void setEf3gpppsdataoff(File ef3gpppsdataoff) {
		this.ef3gpppsdataoff = ef3gpppsdataoff;
	}

	public File getEf3gpppsdataoff() {
		return ef3gpppsdataoff;
	}

	public void setEf3gpppsdataoffservicelist(File ef3gpppsdataoffservicelist) {
		this.ef3gpppsdataoffservicelist = ef3gpppsdataoffservicelist;
	}

	public File getEf3gpppsdataoffservicelist() {
		return ef3gpppsdataoffservicelist;
	}

	public void setEfXcapconfigdata(File efXcapconfigdata) {
		this.efXcapconfigdata = efXcapconfigdata;
	}

	public File getEfXcapconfigdata() {
		return efXcapconfigdata;
	}

	public void setEfEarfcnlist(File efEarfcnlist) {
		this.efEarfcnlist = efEarfcnlist;
	}

	public File getEfEarfcnlist() {
		return efEarfcnlist;
	}

	public void setEfMudmidconfigdata(File efMudmidconfigdata) {
		this.efMudmidconfigdata = efMudmidconfigdata;
	}

	public File getEfMudmidconfigdata() {
		return efMudmidconfigdata;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (efMudmidconfigdata != null) {
			codeLength += efMudmidconfigdata.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 86
			reverseOS.write(0x56);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEarfcnlist != null) {
			codeLength += efEarfcnlist.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 85
			reverseOS.write(0x55);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efXcapconfigdata != null) {
			codeLength += efXcapconfigdata.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 84
			reverseOS.write(0x54);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (ef3gpppsdataoffservicelist != null) {
			codeLength += ef3gpppsdataoffservicelist.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 83
			reverseOS.write(0x53);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (ef3gpppsdataoff != null) {
			codeLength += ef3gpppsdataoff.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 82
			reverseOS.write(0x52);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efImsconfigdata != null) {
			codeLength += efImsconfigdata.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 81
			reverseOS.write(0x51);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efFrompreferred != null) {
			codeLength += efFrompreferred.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 80
			reverseOS.write(0x50);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEpdgselectionem != null) {
			codeLength += efEpdgselectionem.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 79
			reverseOS.write(0x4F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEpdgidem != null) {
			codeLength += efEpdgidem.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 78
			reverseOS.write(0x4E);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEpdgselection != null) {
			codeLength += efEpdgselection.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 77
			reverseOS.write(0x4D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEpdgid != null) {
			codeLength += efEpdgid.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 76
			reverseOS.write(0x4C);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efIpd != null) {
			codeLength += efIpd.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 75
			reverseOS.write(0x4B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efIps != null) {
			codeLength += efIps.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 74
			reverseOS.write(0x4A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efIwl != null) {
			codeLength += efIwl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 73
			reverseOS.write(0x49);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSdnuri != null) {
			codeLength += efSdnuri.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 72
			reverseOS.write(0x48);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efBdnuri != null) {
			codeLength += efBdnuri.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 71
			reverseOS.write(0x47);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efFdnuri != null) {
			codeLength += efFdnuri.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 70
			reverseOS.write(0x46);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efPws != null) {
			codeLength += efPws.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 69
			reverseOS.write(0x45);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efUicciari != null) {
			codeLength += efUicciari.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 68
			reverseOS.write(0x44);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efNasconfig != null) {
			codeLength += efNasconfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 67
			reverseOS.write(0x43);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efUfc != null) {
			codeLength += efUfc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 66
			reverseOS.write(0x42);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efNcpIp != null) {
			codeLength += efNcpIp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 65
			reverseOS.write(0x41);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efPnni != null) {
			codeLength += efPnni.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 64
			reverseOS.write(0x40);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSpni != null) {
			codeLength += efSpni.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 63
			reverseOS.write(0x3F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efNafkca != null) {
			codeLength += efNafkca.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 62
			reverseOS.write(0x3E);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efLrplmnsi != null) {
			codeLength += efLrplmnsi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 61
			reverseOS.write(0x3D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEhplmnpi != null) {
			codeLength += efEhplmnpi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 60
			reverseOS.write(0x3C);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efGbanl != null) {
			codeLength += efGbanl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 59
			reverseOS.write(0x3B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEhplmn != null) {
			codeLength += efEhplmn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 58
			reverseOS.write(0x3A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMuk != null) {
			codeLength += efMuk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 57
			reverseOS.write(0x39);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMsk != null) {
			codeLength += efMsk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 56
			reverseOS.write(0x38);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efGbabp != null) {
			codeLength += efGbabp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 55
			reverseOS.write(0x37);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVbsca != null) {
			codeLength += efVbsca.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 54
			reverseOS.write(0x36);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVgcsca != null) {
			codeLength += efVgcsca.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 53
			reverseOS.write(0x35);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efNia != null) {
			codeLength += efNia.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 52
			reverseOS.write(0x34);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsucp != null) {
			codeLength += efMmsucp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 51
			reverseOS.write(0x33);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsup != null) {
			codeLength += efMmsup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 50
			reverseOS.write(0x32);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsicp != null) {
			codeLength += efMmsicp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 49
			reverseOS.write(0x31);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt8 != null) {
			codeLength += efExt8.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 48
			reverseOS.write(0x30);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmsn != null) {
			codeLength += efMmsn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 47
			reverseOS.write(0x2F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efSpdi != null) {
			codeLength += efSpdi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 46
			reverseOS.write(0x2E);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt7 != null) {
			codeLength += efExt7.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 45
			reverseOS.write(0x2D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efCfis != null) {
			codeLength += efCfis.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 44
			reverseOS.write(0x2C);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMwis != null) {
			codeLength += efMwis.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 43
			reverseOS.write(0x2B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMbi != null) {
			codeLength += efMbi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 42
			reverseOS.write(0x2A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efExt6 != null) {
			codeLength += efExt6.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 41
			reverseOS.write(0x29);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMbdn != null) {
			codeLength += efMbdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 40
			reverseOS.write(0x28);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efOpl != null) {
			codeLength += efOpl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 39
			reverseOS.write(0x27);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efPnn != null) {
			codeLength += efPnn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 38
			reverseOS.write(0x26);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efHiddenkey != null) {
			codeLength += efHiddenkey.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 37
			reverseOS.write(0x25);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efAaem != null) {
			codeLength += efAaem.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
			reverseOS.write(0x24);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efEmlpp != null) {
			codeLength += efEmlpp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			reverseOS.write(0x23);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVbss != null) {
			codeLength += efVbss.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
			reverseOS.write(0x22);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVbs != null) {
			codeLength += efVbs.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 33
			reverseOS.write(0x21);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVgcss != null) {
			codeLength += efVgcss.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
			reverseOS.write(0x20);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVgcs != null) {
			codeLength += efVgcs.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 31
			reverseOS.write(0x1F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efOct != null) {
			codeLength += efOct.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
			reverseOS.write(0xBE);
			codeLength += 1;
		}
		
		if (efIct != null) {
			codeLength += efIct.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 29
			reverseOS.write(0xBD);
			codeLength += 1;
		}
		
		if (efOci != null) {
			codeLength += efOci.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 28
			reverseOS.write(0xBC);
			codeLength += 1;
		}
		
		if (efIci != null) {
			codeLength += efIci.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
			reverseOS.write(0xBB);
			codeLength += 1;
		}
		
		if (efCmi != null) {
			codeLength += efCmi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
			reverseOS.write(0xBA);
			codeLength += 1;
		}
		
		if (efAcl != null) {
			codeLength += efAcl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 25
			reverseOS.write(0xB9);
			codeLength += 1;
		}
		
		if (efExt4 != null) {
			codeLength += efExt4.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
			reverseOS.write(0xB8);
			codeLength += 1;
		}
		
		if (efCcp2 != null) {
			codeLength += efCcp2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			reverseOS.write(0xB7);
			codeLength += 1;
		}
		
		if (efExt5 != null) {
			codeLength += efExt5.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
			reverseOS.write(0xB6);
			codeLength += 1;
		}
		
		if (efBdn != null) {
			codeLength += efBdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			reverseOS.write(0xB5);
			codeLength += 1;
		}
		
		if (efSmsr != null) {
			codeLength += efSmsr.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		if (efCnl != null) {
			codeLength += efCnl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (efDck != null) {
			codeLength += efDck.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			reverseOS.write(0xB2);
			codeLength += 1;
		}
		
		if (efHplmnwact != null) {
			codeLength += efHplmnwact.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			reverseOS.write(0xB1);
			codeLength += 1;
		}
		
		if (efOplmnwact != null) {
			codeLength += efOplmnwact.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			reverseOS.write(0xB0);
			codeLength += 1;
		}
		
		if (efPlmnwact != null) {
			codeLength += efPlmnwact.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			reverseOS.write(0xAF);
			codeLength += 1;
		}
		
		if (efCbmir != null) {
			codeLength += efCbmir.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
			reverseOS.write(0xAE);
			codeLength += 1;
		}
		
		if (efExt3 != null) {
			codeLength += efExt3.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			reverseOS.write(0xAD);
			codeLength += 1;
		}
		
		if (efExt2 != null) {
			codeLength += efExt2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (efSdn != null) {
			codeLength += efSdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (efCbmid != null) {
			codeLength += efCbmid.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (efCbmi != null) {
			codeLength += efCbmi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (efPuct != null) {
			codeLength += efPuct.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (efMsisdn != null) {
			codeLength += efMsisdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (efGid2 != null) {
			codeLength += efGid2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (efGid1 != null) {
			codeLength += efGid1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (efAcm != null) {
			codeLength += efAcm.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (efAcmax != null) {
			codeLength += efAcmax.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (efLi != null) {
			codeLength += efLi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		codeLength += templateID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += optusimHeader.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			optusimHeader = new PEHeader();
			subCodeLength += optusimHeader.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			efLi = new File();
			subCodeLength += efLi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			efAcmax = new File();
			subCodeLength += efAcmax.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			efAcm = new File();
			subCodeLength += efAcm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			efGid1 = new File();
			subCodeLength += efGid1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			efGid2 = new File();
			subCodeLength += efGid2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			efMsisdn = new File();
			subCodeLength += efMsisdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			efPuct = new File();
			subCodeLength += efPuct.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			efCbmi = new File();
			subCodeLength += efCbmi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			efCbmid = new File();
			subCodeLength += efCbmid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			efSdn = new File();
			subCodeLength += efSdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			efExt2 = new File();
			subCodeLength += efExt2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			efExt3 = new File();
			subCodeLength += efExt3.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			efCbmir = new File();
			subCodeLength += efCbmir.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			efPlmnwact = new File();
			subCodeLength += efPlmnwact.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			efOplmnwact = new File();
			subCodeLength += efOplmnwact.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			efHplmnwact = new File();
			subCodeLength += efHplmnwact.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			efDck = new File();
			subCodeLength += efDck.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			efCnl = new File();
			subCodeLength += efCnl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			efSmsr = new File();
			subCodeLength += efSmsr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			efBdn = new File();
			subCodeLength += efBdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			efExt5 = new File();
			subCodeLength += efExt5.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			efCcp2 = new File();
			subCodeLength += efCcp2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
			efExt4 = new File();
			subCodeLength += efExt4.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
			efAcl = new File();
			subCodeLength += efAcl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
			efCmi = new File();
			subCodeLength += efCmi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
			efIci = new File();
			subCodeLength += efIci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
			efOci = new File();
			subCodeLength += efOci.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 29)) {
			efIct = new File();
			subCodeLength += efIct.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			efOct = new File();
			subCodeLength += efOct.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
			efVgcs = new File();
			subCodeLength += efVgcs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
			efVgcss = new File();
			subCodeLength += efVgcss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
			efVbs = new File();
			subCodeLength += efVbs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
			efVbss = new File();
			subCodeLength += efVbss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			efEmlpp = new File();
			subCodeLength += efEmlpp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
			efAaem = new File();
			subCodeLength += efAaem.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 37)) {
			efHiddenkey = new File();
			subCodeLength += efHiddenkey.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 38)) {
			efPnn = new File();
			subCodeLength += efPnn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 39)) {
			efOpl = new File();
			subCodeLength += efOpl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 40)) {
			efMbdn = new File();
			subCodeLength += efMbdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
			efExt6 = new File();
			subCodeLength += efExt6.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 42)) {
			efMbi = new File();
			subCodeLength += efMbi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 43)) {
			efMwis = new File();
			subCodeLength += efMwis.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 44)) {
			efCfis = new File();
			subCodeLength += efCfis.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 45)) {
			efExt7 = new File();
			subCodeLength += efExt7.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 46)) {
			efSpdi = new File();
			subCodeLength += efSpdi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 47)) {
			efMmsn = new File();
			subCodeLength += efMmsn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 48)) {
			efExt8 = new File();
			subCodeLength += efExt8.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 49)) {
			efMmsicp = new File();
			subCodeLength += efMmsicp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 50)) {
			efMmsup = new File();
			subCodeLength += efMmsup.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 51)) {
			efMmsucp = new File();
			subCodeLength += efMmsucp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 52)) {
			efNia = new File();
			subCodeLength += efNia.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 53)) {
			efVgcsca = new File();
			subCodeLength += efVgcsca.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 54)) {
			efVbsca = new File();
			subCodeLength += efVbsca.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 55)) {
			efGbabp = new File();
			subCodeLength += efGbabp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 56)) {
			efMsk = new File();
			subCodeLength += efMsk.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 57)) {
			efMuk = new File();
			subCodeLength += efMuk.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 58)) {
			efEhplmn = new File();
			subCodeLength += efEhplmn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 59)) {
			efGbanl = new File();
			subCodeLength += efGbanl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 60)) {
			efEhplmnpi = new File();
			subCodeLength += efEhplmnpi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 61)) {
			efLrplmnsi = new File();
			subCodeLength += efLrplmnsi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 62)) {
			efNafkca = new File();
			subCodeLength += efNafkca.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 63)) {
			efSpni = new File();
			subCodeLength += efSpni.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 64)) {
			efPnni = new File();
			subCodeLength += efPnni.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 65)) {
			efNcpIp = new File();
			subCodeLength += efNcpIp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 66)) {
			efUfc = new File();
			subCodeLength += efUfc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 67)) {
			efNasconfig = new File();
			subCodeLength += efNasconfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 68)) {
			efUicciari = new File();
			subCodeLength += efUicciari.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 69)) {
			efPws = new File();
			subCodeLength += efPws.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 70)) {
			efFdnuri = new File();
			subCodeLength += efFdnuri.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 71)) {
			efBdnuri = new File();
			subCodeLength += efBdnuri.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 72)) {
			efSdnuri = new File();
			subCodeLength += efSdnuri.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 73)) {
			efIwl = new File();
			subCodeLength += efIwl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 74)) {
			efIps = new File();
			subCodeLength += efIps.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 75)) {
			efIpd = new File();
			subCodeLength += efIpd.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 76)) {
			efEpdgid = new File();
			subCodeLength += efEpdgid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 77)) {
			efEpdgselection = new File();
			subCodeLength += efEpdgselection.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 78)) {
			efEpdgidem = new File();
			subCodeLength += efEpdgidem.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 79)) {
			efEpdgselectionem = new File();
			subCodeLength += efEpdgselectionem.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 80)) {
			efFrompreferred = new File();
			subCodeLength += efFrompreferred.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 81)) {
			efImsconfigdata = new File();
			subCodeLength += efImsconfigdata.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 82)) {
			ef3gpppsdataoff = new File();
			subCodeLength += ef3gpppsdataoff.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 83)) {
			ef3gpppsdataoffservicelist = new File();
			subCodeLength += ef3gpppsdataoffservicelist.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 84)) {
			efXcapconfigdata = new File();
			subCodeLength += efXcapconfigdata.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 85)) {
			efEarfcnlist = new File();
			subCodeLength += efEarfcnlist.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 86)) {
			efMudmidconfigdata = new File();
			subCodeLength += efMudmidconfigdata.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (optusimHeader != null) {
			sb.append("optusimHeader: ");
			optusimHeader.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("optusimHeader: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (templateID != null) {
			sb.append("templateID: ").append(templateID);
		}
		else {
			sb.append("templateID: <empty-required-field>");
		}
		
		if (efLi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efLi: ");
			efLi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAcmax != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAcmax: ");
			efAcmax.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAcm != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAcm: ");
			efAcm.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGid1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGid1: ");
			efGid1.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGid2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGid2: ");
			efGid2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMsisdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMsisdn: ");
			efMsisdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPuct != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPuct: ");
			efPuct.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCbmi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCbmi: ");
			efCbmi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCbmid != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCbmid: ");
			efCbmid.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSdn: ");
			efSdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt2: ");
			efExt2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt3 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt3: ");
			efExt3.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCbmir != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCbmir: ");
			efCbmir.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPlmnwact != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPlmnwact: ");
			efPlmnwact.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOplmnwact != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOplmnwact: ");
			efOplmnwact.appendAsString(sb, indentLevel + 1);
		}
		
		if (efHplmnwact != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efHplmnwact: ");
			efHplmnwact.appendAsString(sb, indentLevel + 1);
		}
		
		if (efDck != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efDck: ");
			efDck.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCnl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCnl: ");
			efCnl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSmsr != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSmsr: ");
			efSmsr.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBdn: ");
			efBdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt5 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt5: ");
			efExt5.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCcp2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCcp2: ");
			efCcp2.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt4 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt4: ");
			efExt4.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAcl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAcl: ");
			efAcl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCmi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCmi: ");
			efCmi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIci != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIci: ");
			efIci.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOci != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOci: ");
			efOci.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIct != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIct: ");
			efIct.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOct != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOct: ");
			efOct.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVgcs != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVgcs: ");
			efVgcs.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVgcss != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVgcss: ");
			efVgcss.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVbs != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVbs: ");
			efVbs.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVbss != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVbss: ");
			efVbss.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEmlpp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEmlpp: ");
			efEmlpp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAaem != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAaem: ");
			efAaem.appendAsString(sb, indentLevel + 1);
		}
		
		if (efHiddenkey != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efHiddenkey: ");
			efHiddenkey.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPnn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPnn: ");
			efPnn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efOpl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efOpl: ");
			efOpl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMbdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMbdn: ");
			efMbdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt6 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt6: ");
			efExt6.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMbi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMbi: ");
			efMbi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMwis != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMwis: ");
			efMwis.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCfis != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCfis: ");
			efCfis.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt7 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt7: ");
			efExt7.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSpdi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSpdi: ");
			efSpdi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsn: ");
			efMmsn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt8 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt8: ");
			efExt8.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsicp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsicp: ");
			efMmsicp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsup != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsup: ");
			efMmsup.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmsucp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmsucp: ");
			efMmsucp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efNia != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efNia: ");
			efNia.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVgcsca != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVgcsca: ");
			efVgcsca.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVbsca != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVbsca: ");
			efVbsca.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGbabp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGbabp: ");
			efGbabp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMsk != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMsk: ");
			efMsk.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMuk != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMuk: ");
			efMuk.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEhplmn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEhplmn: ");
			efEhplmn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGbanl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGbanl: ");
			efGbanl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEhplmnpi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEhplmnpi: ");
			efEhplmnpi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efLrplmnsi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efLrplmnsi: ");
			efLrplmnsi.appendAsString(sb, indentLevel + 1);
		}
		
		if (efNafkca != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efNafkca: ");
			efNafkca.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSpni != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSpni: ");
			efSpni.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPnni != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPnni: ");
			efPnni.appendAsString(sb, indentLevel + 1);
		}
		
		if (efNcpIp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efNcpIp: ");
			efNcpIp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efUfc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efUfc: ");
			efUfc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efNasconfig != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efNasconfig: ");
			efNasconfig.appendAsString(sb, indentLevel + 1);
		}
		
		if (efUicciari != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efUicciari: ");
			efUicciari.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPws != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPws: ");
			efPws.appendAsString(sb, indentLevel + 1);
		}
		
		if (efFdnuri != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efFdnuri: ");
			efFdnuri.appendAsString(sb, indentLevel + 1);
		}
		
		if (efBdnuri != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efBdnuri: ");
			efBdnuri.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSdnuri != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSdnuri: ");
			efSdnuri.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIwl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIwl: ");
			efIwl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIps != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIps: ");
			efIps.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIpd != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIpd: ");
			efIpd.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEpdgid != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEpdgid: ");
			efEpdgid.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEpdgselection != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEpdgselection: ");
			efEpdgselection.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEpdgidem != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEpdgidem: ");
			efEpdgidem.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEpdgselectionem != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEpdgselectionem: ");
			efEpdgselectionem.appendAsString(sb, indentLevel + 1);
		}
		
		if (efFrompreferred != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efFrompreferred: ");
			efFrompreferred.appendAsString(sb, indentLevel + 1);
		}
		
		if (efImsconfigdata != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efImsconfigdata: ");
			efImsconfigdata.appendAsString(sb, indentLevel + 1);
		}
		
		if (ef3gpppsdataoff != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ef3gpppsdataoff: ");
			ef3gpppsdataoff.appendAsString(sb, indentLevel + 1);
		}
		
		if (ef3gpppsdataoffservicelist != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ef3gpppsdataoffservicelist: ");
			ef3gpppsdataoffservicelist.appendAsString(sb, indentLevel + 1);
		}
		
		if (efXcapconfigdata != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efXcapconfigdata: ");
			efXcapconfigdata.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEarfcnlist != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEarfcnlist: ");
			efEarfcnlist.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMudmidconfigdata != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMudmidconfigdata: ");
			efMudmidconfigdata.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class ServicesList implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerNull contactless = null;
	private BerNull usim = null;
	private BerNull isim = null;
	private BerNull csim = null;
	private BerNull milenage = null;
	private BerNull tuak128 = null;
	private BerNull cave = null;
	private BerNull gbaUsim = null;
	private BerNull gbaIsim = null;
	private BerNull mbms = null;
	private BerNull eap = null;
	private BerNull javacard = null;
	private BerNull multos = null;
	private BerNull multipleUsim = null;
	private BerNull multipleIsim = null;
	private BerNull multipleCsim = null;
	private BerNull tuak256 = null;
	private BerNull usimTestAlgorithm = null;
	private BerNull berTlv = null;
	private BerNull dfLink = null;
	private BerNull catTp = null;
	private BerNull getIdentity = null;
	private BerNull profileAX25519 = null;
	private BerNull profileBP256 = null;
	private BerNull suciCalculatorApi = null;
	private BerNull dnsResolution = null;
	private BerNull scp11ac = null;
	private BerNull scp11cAuthorizationMechanism = null;
	private BerNull s16mode = null;
	
	public ServicesList() {
	}

	public ServicesList(byte[] code) {
		this.code = code;
	}

	public void setContactless(BerNull contactless) {
		this.contactless = contactless;
	}

	public BerNull getContactless() {
		return contactless;
	}

	public void setUsim(BerNull usim) {
		this.usim = usim;
	}

	public BerNull getUsim() {
		return usim;
	}

	public void setIsim(BerNull isim) {
		this.isim = isim;
	}

	public BerNull getIsim() {
		return isim;
	}

	public void setCsim(BerNull csim) {
		this.csim = csim;
	}

	public BerNull getCsim() {
		return csim;
	}

	public void setMilenage(BerNull milenage) {
		this.milenage = milenage;
	}

	public BerNull getMilenage() {
		return milenage;
	}

	public void setTuak128(BerNull tuak128) {
		this.tuak128 = tuak128;
	}

	public BerNull getTuak128() {
		return tuak128;
	}

	public void setCave(BerNull cave) {
		this.cave = cave;
	}

	public BerNull getCave() {
		return cave;
	}

	public void setGbaUsim(BerNull gbaUsim) {
		this.gbaUsim = gbaUsim;
	}

	public BerNull getGbaUsim() {
		return gbaUsim;
	}

	public void setGbaIsim(BerNull gbaIsim) {
		this.gbaIsim = gbaIsim;
	}

	public BerNull getGbaIsim() {
		return gbaIsim;
	}

	public void setMbms(BerNull mbms) {
		this.mbms = mbms;
	}

	public BerNull getMbms() {
		return mbms;
	}

	public void setEap(BerNull eap) {
		this.eap = eap;
	}

	public BerNull getEap() {
		return eap;
	}

	public void setJavacard(BerNull javacard) {
		this.javacard = javacard;
	}

	public BerNull getJavacard() {
		return javacard;
	}

	public void setMultos(BerNull multos) {
		this.multos = multos;
	}

	public BerNull getMultos() {
		return multos;
	}

	public void setMultipleUsim(BerNull multipleUsim) {
		this.multipleUsim = multipleUsim;
	}

	public BerNull getMultipleUsim() {
		return multipleUsim;
	}

	public void setMultipleIsim(BerNull multipleIsim) {
		this.multipleIsim = multipleIsim;
	}

	public BerNull getMultipleIsim() {
		return multipleIsim;
	}

	public void setMultipleCsim(BerNull multipleCsim) {
		this.multipleCsim = multipleCsim;
	}

	public BerNull getMultipleCsim() {
		return multipleCsim;
	}

	public void setTuak256(BerNull tuak256) {
		this.tuak256 = tuak256;
	}

	public BerNull getTuak256() {
		return tuak256;
	}

	public void setUsimTestAlgorithm(BerNull usimTestAlgorithm) {
		this.usimTestAlgorithm = usimTestAlgorithm;
	}

	public BerNull getUsimTestAlgorithm() {
		return usimTestAlgorithm;
	}

	public void setBerTlv(BerNull berTlv) {
		this.berTlv = berTlv;
	}

	public BerNull getBerTlv() {
		return berTlv;
	}

	public void setDfLink(BerNull dfLink) {
		this.dfLink = dfLink;
	}

	public BerNull getDfLink() {
		return dfLink;
	}

	public void setCatTp(BerNull catTp) {
		this.catTp = catTp;
	}

	public BerNull getCatTp() {
		return catTp;
	}

	public void setGetIdentity(BerNull getIdentity) {
		this.getIdentity = getIdentity;
	}

	public BerNull getGetIdentity() {
		return getIdentity;
	}

	public void setProfileAX25519(BerNull profileAX25519) {
		this.profileAX25519 = profileAX25519;
	}

	public BerNull getProfileAX25519() {
		return profileAX25519;
	}

	public void setProfileBP256(BerNull profileBP256) {
		this.profileBP256 = profileBP256;
	}

	public BerNull getProfileBP256() {
		return profileBP256;
	}

	public void setSuciCalculatorApi(BerNull suciCalculatorApi) {
		this.suciCalculatorApi = suciCalculatorApi;
	}

	public BerNull getSuciCalculatorApi() {
		return suciCalculatorApi;
	}

	public void setDnsResolution(BerNull dnsResolution) {
		this.dnsResolution = dnsResolution;
	}

	public BerNull getDnsResolution() {
		return dnsResolution;
	}

	public void setScp11ac(BerNull scp11ac) {
		this.scp11ac = scp11ac;
	}

	public BerNull getScp11ac() {
		return scp11ac;
	}

	public void setScp11cAuthorizationMechanism(BerNull scp11cAuthorizationMechanism) {
		this.scp11cAuthorizationMechanism = scp11cAuthorizationMechanism;
	}

	public BerNull getScp11cAuthorizationMechanism() {
		return scp11cAuthorizationMechanism;
	}

	public void setS16mode(BerNull s16mode) {
		this.s16mode = s16mode;
	}

	public BerNull getS16mode() {
		return s16mode;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (s16mode != null) {
			codeLength += s16mode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 28
			reverseOS.write(0x9C);
			codeLength += 1;
		}
		
		if (scp11cAuthorizationMechanism != null) {
			codeLength += scp11cAuthorizationMechanism.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 27
			reverseOS.write(0x9B);
			codeLength += 1;
		}
		
		if (scp11ac != null) {
			codeLength += scp11ac.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 26
			reverseOS.write(0x9A);
			codeLength += 1;
		}
		
		if (dnsResolution != null) {
			codeLength += dnsResolution.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 25
			reverseOS.write(0x99);
			codeLength += 1;
		}
		
		if (suciCalculatorApi != null) {
			codeLength += suciCalculatorApi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			reverseOS.write(0x98);
			codeLength += 1;
		}
		
		if (profileBP256 != null) {
			codeLength += profileBP256.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 23
			reverseOS.write(0x97);
			codeLength += 1;
		}
		
		if (profileAX25519 != null) {
			codeLength += profileAX25519.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			reverseOS.write(0x96);
			codeLength += 1;
		}
		
		if (getIdentity != null) {
			codeLength += getIdentity.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			reverseOS.write(0x95);
			codeLength += 1;
		}
		
		if (catTp != null) {
			codeLength += catTp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			reverseOS.write(0x94);
			codeLength += 1;
		}
		
		if (dfLink != null) {
			codeLength += dfLink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			reverseOS.write(0x93);
			codeLength += 1;
		}
		
		if (berTlv != null) {
			codeLength += berTlv.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			reverseOS.write(0x92);
			codeLength += 1;
		}
		
		if (usimTestAlgorithm != null) {
			codeLength += usimTestAlgorithm.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			reverseOS.write(0x91);
			codeLength += 1;
		}
		
		if (tuak256 != null) {
			codeLength += tuak256.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			reverseOS.write(0x90);
			codeLength += 1;
		}
		
		if (multipleCsim != null) {
			codeLength += multipleCsim.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		if (multipleIsim != null) {
			codeLength += multipleIsim.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		if (multipleUsim != null) {
			codeLength += multipleUsim.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (multos != null) {
			codeLength += multos.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (javacard != null) {
			codeLength += javacard.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (eap != null) {
			codeLength += eap.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		if (mbms != null) {
			codeLength += mbms.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (gbaIsim != null) {
			codeLength += gbaIsim.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (gbaUsim != null) {
			codeLength += gbaUsim.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (cave != null) {
			codeLength += cave.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (tuak128 != null) {
			codeLength += tuak128.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (milenage != null) {
			codeLength += milenage.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (csim != null) {
			codeLength += csim.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (isim != null) {
			codeLength += isim.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (usim != null) {
			codeLength += usim.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		if (contactless != null) {
			codeLength += contactless.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			contactless = new BerNull();
			subCodeLength += contactless.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			usim = new BerNull();
			subCodeLength += usim.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			isim = new BerNull();
			subCodeLength += isim.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			csim = new BerNull();
			subCodeLength += csim.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			milenage = new BerNull();
			subCodeLength += milenage.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			tuak128 = new BerNull();
			subCodeLength += tuak128.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			cave = new BerNull();
			subCodeLength += cave.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			gbaUsim = new BerNull();
			subCodeLength += gbaUsim.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			gbaIsim = new BerNull();
			subCodeLength += gbaIsim.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			mbms = new BerNull();
			subCodeLength += mbms.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			eap = new BerNull();
			subCodeLength += eap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			javacard = new BerNull();
			subCodeLength += javacard.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			multos = new BerNull();
			subCodeLength += multos.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			multipleUsim = new BerNull();
			subCodeLength += multipleUsim.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			multipleIsim = new BerNull();
			subCodeLength += multipleIsim.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			multipleCsim = new BerNull();
			subCodeLength += multipleCsim.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			tuak256 = new BerNull();
			subCodeLength += tuak256.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			usimTestAlgorithm = new BerNull();
			subCodeLength += usimTestAlgorithm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			berTlv = new BerNull();
			subCodeLength += berTlv.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
			dfLink = new BerNull();
			subCodeLength += dfLink.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			catTp = new BerNull();
			subCodeLength += catTp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
			getIdentity = new BerNull();
			subCodeLength += getIdentity.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
			profileAX25519 = new BerNull();
			subCodeLength += profileAX25519.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
			profileBP256 = new BerNull();
			subCodeLength += profileBP256.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
			suciCalculatorApi = new BerNull();
			subCodeLength += suciCalculatorApi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
			dnsResolution = new BerNull();
			subCodeLength += dnsResolution.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 26)) {
			scp11ac = new BerNull();
			subCodeLength += scp11ac.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 27)) {
			scp11cAuthorizationMechanism = new BerNull();
			subCodeLength += scp11cAuthorizationMechanism.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 28)) {
			s16mode = new BerNull();
			subCodeLength += s16mode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (contactless != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("contactless: ").append(contactless);
			firstSelectedElement = false;
		}
		
		if (usim != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usim: ").append(usim);
			firstSelectedElement = false;
		}
		
		if (isim != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("isim: ").append(isim);
			firstSelectedElement = false;
		}
		
		if (csim != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("csim: ").append(csim);
			firstSelectedElement = false;
		}
		
		if (milenage != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("milenage: ").append(milenage);
			firstSelectedElement = false;
		}
		
		if (tuak128 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tuak128: ").append(tuak128);
			firstSelectedElement = false;
		}
		
		if (cave != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cave: ").append(cave);
			firstSelectedElement = false;
		}
		
		if (gbaUsim != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("gbaUsim: ").append(gbaUsim);
			firstSelectedElement = false;
		}
		
		if (gbaIsim != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("gbaIsim: ").append(gbaIsim);
			firstSelectedElement = false;
		}
		
		if (mbms != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mbms: ").append(mbms);
			firstSelectedElement = false;
		}
		
		if (eap != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("eap: ").append(eap);
			firstSelectedElement = false;
		}
		
		if (javacard != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("javacard: ").append(javacard);
			firstSelectedElement = false;
		}
		
		if (multos != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("multos: ").append(multos);
			firstSelectedElement = false;
		}
		
		if (multipleUsim != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("multipleUsim: ").append(multipleUsim);
			firstSelectedElement = false;
		}
		
		if (multipleIsim != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("multipleIsim: ").append(multipleIsim);
			firstSelectedElement = false;
		}
		
		if (multipleCsim != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("multipleCsim: ").append(multipleCsim);
			firstSelectedElement = false;
		}
		
		if (tuak256 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tuak256: ").append(tuak256);
			firstSelectedElement = false;
		}
		
		if (usimTestAlgorithm != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usimTestAlgorithm: ").append(usimTestAlgorithm);
			firstSelectedElement = false;
		}
		
		if (berTlv != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("berTlv: ").append(berTlv);
			firstSelectedElement = false;
		}
		
		if (dfLink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dfLink: ").append(dfLink);
			firstSelectedElement = false;
		}
		
		if (catTp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("catTp: ").append(catTp);
			firstSelectedElement = false;
		}
		
		if (getIdentity != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("getIdentity: ").append(getIdentity);
			firstSelectedElement = false;
		}
		
		if (profileAX25519 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("profileAX25519: ").append(profileAX25519);
			firstSelectedElement = false;
		}
		
		if (profileBP256 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("profileBP256: ").append(profileBP256);
			firstSelectedElement = false;
		}
		
		if (suciCalculatorApi != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("suciCalculatorApi: ").append(suciCalculatorApi);
			firstSelectedElement = false;
		}
		
		if (dnsResolution != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dnsResolution: ").append(dnsResolution);
			firstSelectedElement = false;
		}
		
		if (scp11ac != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scp11ac: ").append(scp11ac);
			firstSelectedElement = false;
		}
		
		if (scp11cAuthorizationMechanism != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scp11cAuthorizationMechanism: ").append(scp11cAuthorizationMechanism);
			firstSelectedElement = false;
		}
		
		if (s16mode != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("s16mode: ").append(s16mode);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class PETELECOM implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private PEHeader telecomHeader = null;
	private BerObjectIdentifier templateID = null;
	private File dfTelecom = null;
	private File efArr = null;
	private File efRma = null;
	private File efSume = null;
	private File efIceDn = null;
	private File efIceFf = null;
	private File efPsismsc = null;
	private File dfGraphics = null;
	private File efImg = null;
	private File efIidf = null;
	private File efIceGraphics = null;
	private File efLaunchScws = null;
	private File efIcon = null;
	private File dfPhonebook = null;
	private File efPbr = null;
	private File efExt1 = null;
	private File efAas = null;
	private File efGas = null;
	private File efPsc = null;
	private File efCc = null;
	private File efPuid = null;
	private File efIap = null;
	private File efAdn = null;
	private File efPbc = null;
	private File efAnr = null;
	private File efPuri = null;
	private File efEmail = null;
	private File efSne = null;
	private File efUid = null;
	private File efGrp = null;
	private File efCcp1 = null;
	private File dfMultimedia = null;
	private File efMml = null;
	private File efMmdf = null;
	private File dfMmss = null;
	private File efMlpl = null;
	private File efMspl = null;
	private File efMmssmode = null;
	private File dfMcs = null;
	private File efMst = null;
	private File efMcsConfig = null;
	private File dfV2x = null;
	private File efVst = null;
	private File efV2xConfig = null;
	private File efV2xpPc5 = null;
	private File efV2xpUu = null;
	
	public PETELECOM() {
	}

	public PETELECOM(byte[] code) {
		this.code = code;
	}

	public void setTelecomHeader(PEHeader telecomHeader) {
		this.telecomHeader = telecomHeader;
	}

	public PEHeader getTelecomHeader() {
		return telecomHeader;
	}

	public void setTemplateID(BerObjectIdentifier templateID) {
		this.templateID = templateID;
	}

	public BerObjectIdentifier getTemplateID() {
		return templateID;
	}

	public void setDfTelecom(File dfTelecom) {
		this.dfTelecom = dfTelecom;
	}

	public File getDfTelecom() {
		return dfTelecom;
	}

	public void setEfArr(File efArr) {
		this.efArr = efArr;
	}

	public File getEfArr() {
		return efArr;
	}

	public void setEfRma(File efRma) {
		this.efRma = efRma;
	}

	public File getEfRma() {
		return efRma;
	}

	public void setEfSume(File efSume) {
		this.efSume = efSume;
	}

	public File getEfSume() {
		return efSume;
	}

	public void setEfIceDn(File efIceDn) {
		this.efIceDn = efIceDn;
	}

	public File getEfIceDn() {
		return efIceDn;
	}

	public void setEfIceFf(File efIceFf) {
		this.efIceFf = efIceFf;
	}

	public File getEfIceFf() {
		return efIceFf;
	}

	public void setEfPsismsc(File efPsismsc) {
		this.efPsismsc = efPsismsc;
	}

	public File getEfPsismsc() {
		return efPsismsc;
	}

	public void setDfGraphics(File dfGraphics) {
		this.dfGraphics = dfGraphics;
	}

	public File getDfGraphics() {
		return dfGraphics;
	}

	public void setEfImg(File efImg) {
		this.efImg = efImg;
	}

	public File getEfImg() {
		return efImg;
	}

	public void setEfIidf(File efIidf) {
		this.efIidf = efIidf;
	}

	public File getEfIidf() {
		return efIidf;
	}

	public void setEfIceGraphics(File efIceGraphics) {
		this.efIceGraphics = efIceGraphics;
	}

	public File getEfIceGraphics() {
		return efIceGraphics;
	}

	public void setEfLaunchScws(File efLaunchScws) {
		this.efLaunchScws = efLaunchScws;
	}

	public File getEfLaunchScws() {
		return efLaunchScws;
	}

	public void setEfIcon(File efIcon) {
		this.efIcon = efIcon;
	}

	public File getEfIcon() {
		return efIcon;
	}

	public void setDfPhonebook(File dfPhonebook) {
		this.dfPhonebook = dfPhonebook;
	}

	public File getDfPhonebook() {
		return dfPhonebook;
	}

	public void setEfPbr(File efPbr) {
		this.efPbr = efPbr;
	}

	public File getEfPbr() {
		return efPbr;
	}

	public void setEfExt1(File efExt1) {
		this.efExt1 = efExt1;
	}

	public File getEfExt1() {
		return efExt1;
	}

	public void setEfAas(File efAas) {
		this.efAas = efAas;
	}

	public File getEfAas() {
		return efAas;
	}

	public void setEfGas(File efGas) {
		this.efGas = efGas;
	}

	public File getEfGas() {
		return efGas;
	}

	public void setEfPsc(File efPsc) {
		this.efPsc = efPsc;
	}

	public File getEfPsc() {
		return efPsc;
	}

	public void setEfCc(File efCc) {
		this.efCc = efCc;
	}

	public File getEfCc() {
		return efCc;
	}

	public void setEfPuid(File efPuid) {
		this.efPuid = efPuid;
	}

	public File getEfPuid() {
		return efPuid;
	}

	public void setEfIap(File efIap) {
		this.efIap = efIap;
	}

	public File getEfIap() {
		return efIap;
	}

	public void setEfAdn(File efAdn) {
		this.efAdn = efAdn;
	}

	public File getEfAdn() {
		return efAdn;
	}

	public void setEfPbc(File efPbc) {
		this.efPbc = efPbc;
	}

	public File getEfPbc() {
		return efPbc;
	}

	public void setEfAnr(File efAnr) {
		this.efAnr = efAnr;
	}

	public File getEfAnr() {
		return efAnr;
	}

	public void setEfPuri(File efPuri) {
		this.efPuri = efPuri;
	}

	public File getEfPuri() {
		return efPuri;
	}

	public void setEfEmail(File efEmail) {
		this.efEmail = efEmail;
	}

	public File getEfEmail() {
		return efEmail;
	}

	public void setEfSne(File efSne) {
		this.efSne = efSne;
	}

	public File getEfSne() {
		return efSne;
	}

	public void setEfUid(File efUid) {
		this.efUid = efUid;
	}

	public File getEfUid() {
		return efUid;
	}

	public void setEfGrp(File efGrp) {
		this.efGrp = efGrp;
	}

	public File getEfGrp() {
		return efGrp;
	}

	public void setEfCcp1(File efCcp1) {
		this.efCcp1 = efCcp1;
	}

	public File getEfCcp1() {
		return efCcp1;
	}

	public void setDfMultimedia(File dfMultimedia) {
		this.dfMultimedia = dfMultimedia;
	}

	public File getDfMultimedia() {
		return dfMultimedia;
	}

	public void setEfMml(File efMml) {
		this.efMml = efMml;
	}

	public File getEfMml() {
		return efMml;
	}

	public void setEfMmdf(File efMmdf) {
		this.efMmdf = efMmdf;
	}

	public File getEfMmdf() {
		return efMmdf;
	}

	public void setDfMmss(File dfMmss) {
		this.dfMmss = dfMmss;
	}

	public File getDfMmss() {
		return dfMmss;
	}

	public void setEfMlpl(File efMlpl) {
		this.efMlpl = efMlpl;
	}

	public File getEfMlpl() {
		return efMlpl;
	}

	public void setEfMspl(File efMspl) {
		this.efMspl = efMspl;
	}

	public File getEfMspl() {
		return efMspl;
	}

	public void setEfMmssmode(File efMmssmode) {
		this.efMmssmode = efMmssmode;
	}

	public File getEfMmssmode() {
		return efMmssmode;
	}

	public void setDfMcs(File dfMcs) {
		this.dfMcs = dfMcs;
	}

	public File getDfMcs() {
		return dfMcs;
	}

	public void setEfMst(File efMst) {
		this.efMst = efMst;
	}

	public File getEfMst() {
		return efMst;
	}

	public void setEfMcsConfig(File efMcsConfig) {
		this.efMcsConfig = efMcsConfig;
	}

	public File getEfMcsConfig() {
		return efMcsConfig;
	}

	public void setDfV2x(File dfV2x) {
		this.dfV2x = dfV2x;
	}

	public File getDfV2x() {
		return dfV2x;
	}

	public void setEfVst(File efVst) {
		this.efVst = efVst;
	}

	public File getEfVst() {
		return efVst;
	}

	public void setEfV2xConfig(File efV2xConfig) {
		this.efV2xConfig = efV2xConfig;
	}

	public File getEfV2xConfig() {
		return efV2xConfig;
	}

	public void setEfV2xpPc5(File efV2xpPc5) {
		this.efV2xpPc5 = efV2xpPc5;
	}

	public File getEfV2xpPc5() {
		return efV2xpPc5;
	}

	public void setEfV2xpUu(File efV2xpUu) {
		this.efV2xpUu = efV2xpUu;
	}

	public File getEfV2xpUu() {
		return efV2xpUu;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (efV2xpUu != null) {
			codeLength += efV2xpUu.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 47
			reverseOS.write(0x2F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efV2xpPc5 != null) {
			codeLength += efV2xpPc5.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 46
			reverseOS.write(0x2E);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efV2xConfig != null) {
			codeLength += efV2xConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 45
			reverseOS.write(0x2D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efVst != null) {
			codeLength += efVst.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 44
			reverseOS.write(0x2C);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (dfV2x != null) {
			codeLength += dfV2x.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 43
			reverseOS.write(0x2B);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMcsConfig != null) {
			codeLength += efMcsConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 42
			reverseOS.write(0x2A);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMst != null) {
			codeLength += efMst.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 41
			reverseOS.write(0x29);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (dfMcs != null) {
			codeLength += dfMcs.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 40
			reverseOS.write(0x28);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmssmode != null) {
			codeLength += efMmssmode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 39
			reverseOS.write(0x27);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMspl != null) {
			codeLength += efMspl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 38
			reverseOS.write(0x26);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMlpl != null) {
			codeLength += efMlpl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 37
			reverseOS.write(0x25);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (dfMmss != null) {
			codeLength += dfMmss.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
			reverseOS.write(0x24);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMmdf != null) {
			codeLength += efMmdf.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			reverseOS.write(0x23);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efMml != null) {
			codeLength += efMml.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
			reverseOS.write(0x22);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (dfMultimedia != null) {
			codeLength += dfMultimedia.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 33
			reverseOS.write(0x21);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efCcp1 != null) {
			codeLength += efCcp1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
			reverseOS.write(0x20);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efGrp != null) {
			codeLength += efGrp.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 31
			reverseOS.write(0x1F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (efUid != null) {
			codeLength += efUid.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
			reverseOS.write(0xBE);
			codeLength += 1;
		}
		
		if (efSne != null) {
			codeLength += efSne.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 29
			reverseOS.write(0xBD);
			codeLength += 1;
		}
		
		if (efEmail != null) {
			codeLength += efEmail.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 28
			reverseOS.write(0xBC);
			codeLength += 1;
		}
		
		if (efPuri != null) {
			codeLength += efPuri.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
			reverseOS.write(0xBB);
			codeLength += 1;
		}
		
		if (efAnr != null) {
			codeLength += efAnr.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
			reverseOS.write(0xBA);
			codeLength += 1;
		}
		
		if (efPbc != null) {
			codeLength += efPbc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 25
			reverseOS.write(0xB9);
			codeLength += 1;
		}
		
		if (efAdn != null) {
			codeLength += efAdn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
			reverseOS.write(0xB8);
			codeLength += 1;
		}
		
		if (efIap != null) {
			codeLength += efIap.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			reverseOS.write(0xB7);
			codeLength += 1;
		}
		
		if (efPuid != null) {
			codeLength += efPuid.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
			reverseOS.write(0xB6);
			codeLength += 1;
		}
		
		if (efCc != null) {
			codeLength += efCc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			reverseOS.write(0xB5);
			codeLength += 1;
		}
		
		if (efPsc != null) {
			codeLength += efPsc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		if (efGas != null) {
			codeLength += efGas.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (efAas != null) {
			codeLength += efAas.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			reverseOS.write(0xB2);
			codeLength += 1;
		}
		
		if (efExt1 != null) {
			codeLength += efExt1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			reverseOS.write(0xB1);
			codeLength += 1;
		}
		
		if (efPbr != null) {
			codeLength += efPbr.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			reverseOS.write(0xB0);
			codeLength += 1;
		}
		
		if (dfPhonebook != null) {
			codeLength += dfPhonebook.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			reverseOS.write(0xAF);
			codeLength += 1;
		}
		
		if (efIcon != null) {
			codeLength += efIcon.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
			reverseOS.write(0xAE);
			codeLength += 1;
		}
		
		if (efLaunchScws != null) {
			codeLength += efLaunchScws.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			reverseOS.write(0xAD);
			codeLength += 1;
		}
		
		if (efIceGraphics != null) {
			codeLength += efIceGraphics.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (efIidf != null) {
			codeLength += efIidf.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (efImg != null) {
			codeLength += efImg.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (dfGraphics != null) {
			codeLength += dfGraphics.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (efPsismsc != null) {
			codeLength += efPsismsc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (efIceFf != null) {
			codeLength += efIceFf.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (efIceDn != null) {
			codeLength += efIceDn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (efSume != null) {
			codeLength += efSume.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (efRma != null) {
			codeLength += efRma.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (efArr != null) {
			codeLength += efArr.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		codeLength += dfTelecom.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
		reverseOS.write(0xA2);
		codeLength += 1;
		
		codeLength += templateID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += telecomHeader.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			telecomHeader = new PEHeader();
			subCodeLength += telecomHeader.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			dfTelecom = new File();
			subCodeLength += dfTelecom.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			efArr = new File();
			subCodeLength += efArr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			efRma = new File();
			subCodeLength += efRma.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			efSume = new File();
			subCodeLength += efSume.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			efIceDn = new File();
			subCodeLength += efIceDn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			efIceFf = new File();
			subCodeLength += efIceFf.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			efPsismsc = new File();
			subCodeLength += efPsismsc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			dfGraphics = new File();
			subCodeLength += dfGraphics.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			efImg = new File();
			subCodeLength += efImg.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			efIidf = new File();
			subCodeLength += efIidf.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			efIceGraphics = new File();
			subCodeLength += efIceGraphics.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			efLaunchScws = new File();
			subCodeLength += efLaunchScws.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			efIcon = new File();
			subCodeLength += efIcon.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			dfPhonebook = new File();
			subCodeLength += dfPhonebook.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			efPbr = new File();
			subCodeLength += efPbr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			efExt1 = new File();
			subCodeLength += efExt1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			efAas = new File();
			subCodeLength += efAas.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			efGas = new File();
			subCodeLength += efGas.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			efPsc = new File();
			subCodeLength += efPsc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			efCc = new File();
			subCodeLength += efCc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			efPuid = new File();
			subCodeLength += efPuid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			efIap = new File();
			subCodeLength += efIap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
			efAdn = new File();
			subCodeLength += efAdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
			efPbc = new File();
			subCodeLength += efPbc.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
			efAnr = new File();
			subCodeLength += efAnr.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
			efPuri = new File();
			subCodeLength += efPuri.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 28)) {
			efEmail = new File();
			subCodeLength += efEmail.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 29)) {
			efSne = new File();
			subCodeLength += efSne.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			efUid = new File();
			subCodeLength += efUid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
			efGrp = new File();
			subCodeLength += efGrp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
			efCcp1 = new File();
			subCodeLength += efCcp1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
			dfMultimedia = new File();
			subCodeLength += dfMultimedia.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
			efMml = new File();
			subCodeLength += efMml.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			efMmdf = new File();
			subCodeLength += efMmdf.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
			dfMmss = new File();
			subCodeLength += dfMmss.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 37)) {
			efMlpl = new File();
			subCodeLength += efMlpl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 38)) {
			efMspl = new File();
			subCodeLength += efMspl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 39)) {
			efMmssmode = new File();
			subCodeLength += efMmssmode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 40)) {
			dfMcs = new File();
			subCodeLength += dfMcs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
			efMst = new File();
			subCodeLength += efMst.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 42)) {
			efMcsConfig = new File();
			subCodeLength += efMcsConfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 43)) {
			dfV2x = new File();
			subCodeLength += dfV2x.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 44)) {
			efVst = new File();
			subCodeLength += efVst.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 45)) {
			efV2xConfig = new File();
			subCodeLength += efV2xConfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 46)) {
			efV2xpPc5 = new File();
			subCodeLength += efV2xpPc5.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 47)) {
			efV2xpUu = new File();
			subCodeLength += efV2xpUu.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (telecomHeader != null) {
			sb.append("telecomHeader: ");
			telecomHeader.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("telecomHeader: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (templateID != null) {
			sb.append("templateID: ").append(templateID);
		}
		else {
			sb.append("templateID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dfTelecom != null) {
			sb.append("dfTelecom: ");
			dfTelecom.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("dfTelecom: <empty-required-field>");
		}
		
		if (efArr != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efArr: ");
			efArr.appendAsString(sb, indentLevel + 1);
		}
		
		if (efRma != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efRma: ");
			efRma.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSume != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSume: ");
			efSume.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIceDn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIceDn: ");
			efIceDn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIceFf != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIceFf: ");
			efIceFf.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPsismsc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPsismsc: ");
			efPsismsc.appendAsString(sb, indentLevel + 1);
		}
		
		if (dfGraphics != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dfGraphics: ");
			dfGraphics.appendAsString(sb, indentLevel + 1);
		}
		
		if (efImg != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efImg: ");
			efImg.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIidf != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIidf: ");
			efIidf.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIceGraphics != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIceGraphics: ");
			efIceGraphics.appendAsString(sb, indentLevel + 1);
		}
		
		if (efLaunchScws != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efLaunchScws: ");
			efLaunchScws.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIcon != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIcon: ");
			efIcon.appendAsString(sb, indentLevel + 1);
		}
		
		if (dfPhonebook != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dfPhonebook: ");
			dfPhonebook.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPbr != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPbr: ");
			efPbr.appendAsString(sb, indentLevel + 1);
		}
		
		if (efExt1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efExt1: ");
			efExt1.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAas != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAas: ");
			efAas.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGas != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGas: ");
			efGas.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPsc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPsc: ");
			efPsc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCc: ");
			efCc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPuid != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPuid: ");
			efPuid.appendAsString(sb, indentLevel + 1);
		}
		
		if (efIap != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efIap: ");
			efIap.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAdn != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAdn: ");
			efAdn.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPbc != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPbc: ");
			efPbc.appendAsString(sb, indentLevel + 1);
		}
		
		if (efAnr != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efAnr: ");
			efAnr.appendAsString(sb, indentLevel + 1);
		}
		
		if (efPuri != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efPuri: ");
			efPuri.appendAsString(sb, indentLevel + 1);
		}
		
		if (efEmail != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efEmail: ");
			efEmail.appendAsString(sb, indentLevel + 1);
		}
		
		if (efSne != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efSne: ");
			efSne.appendAsString(sb, indentLevel + 1);
		}
		
		if (efUid != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efUid: ");
			efUid.appendAsString(sb, indentLevel + 1);
		}
		
		if (efGrp != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efGrp: ");
			efGrp.appendAsString(sb, indentLevel + 1);
		}
		
		if (efCcp1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efCcp1: ");
			efCcp1.appendAsString(sb, indentLevel + 1);
		}
		
		if (dfMultimedia != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dfMultimedia: ");
			dfMultimedia.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMml != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMml: ");
			efMml.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmdf != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmdf: ");
			efMmdf.appendAsString(sb, indentLevel + 1);
		}
		
		if (dfMmss != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dfMmss: ");
			dfMmss.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMlpl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMlpl: ");
			efMlpl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMspl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMspl: ");
			efMspl.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMmssmode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMmssmode: ");
			efMmssmode.appendAsString(sb, indentLevel + 1);
		}
		
		if (dfMcs != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dfMcs: ");
			dfMcs.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMst != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMst: ");
			efMst.appendAsString(sb, indentLevel + 1);
		}
		
		if (efMcsConfig != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efMcsConfig: ");
			efMcsConfig.appendAsString(sb, indentLevel + 1);
		}
		
		if (dfV2x != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dfV2x: ");
			dfV2x.appendAsString(sb, indentLevel + 1);
		}
		
		if (efVst != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efVst: ");
			efVst.appendAsString(sb, indentLevel + 1);
		}
		
		if (efV2xConfig != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efV2xConfig: ");
			efV2xConfig.appendAsString(sb, indentLevel + 1);
		}
		
		if (efV2xpPc5 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efV2xpPc5: ");
			efV2xpPc5.appendAsString(sb, indentLevel + 1);
		}
		
		if (efV2xpUu != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("efV2xpUu: ");
			efV2xpUu.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

